{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/kimberleycheung/CiviXchain/civicxchain-platform/frontend/app/page.tsx"],"sourcesContent":["/*'use client';\n\nimport { useState, useEffect } from 'react';\n\nexport default function Home() {\n  const [posts, setPosts] = useState([]);\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900\">\n      {/* Cyberpunk Navigation *\n      <nav className=\"bg-black/40 backdrop-blur-xl border-b border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-black font-bold text-sm\">C</span>\n                </div>\n                <h1 className=\"text-2xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                  CivicXChain\n                </h1>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"bg-cyan-500/20 hover:bg-cyan-500/30 border border-cyan-500/50 text-cyan-400 px-4 py-2 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/25\">\n                Connect Wallet\n              </button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section *\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-transparent to-purple-500/10\"></div>\n        <div className=\"max-w-7xl mx-auto px-4 py-12\">\n          <div className=\"text-center\">\n            <h2 className=\"text-5xl font-bold text-white mb-4\">\n              The Future of \n              <span className=\"bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\"> Civic Accountability</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-8 max-w-3xl mx-auto\">\n              Where government officials and citizens unite through blockchain-verified environmental commitments. \n              Track progress, earn rewards, and build a sustainable future together.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Feed *\n      <div className=\"max-w-4xl mx-auto px-4 pb-12\">\n        {/* Create Commitment Section *\n        <div className=\"bg-black/30 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8 shadow-2xl\">\n          <h3 className=\"text-xl text-white mb-4 flex items-center\">\n            <span className=\"w-2 h-2 bg-cyan-400 rounded-full mr-3 animate-pulse\"></span>\n            What's your environmental commitment?\n          </h3>\n          <div className=\"space-y-4\">\n            <textarea \n              className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg p-4 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400 transition-all\"\n              placeholder=\"I commit to reducing my city's carbon emissions by 25% within 12 months...\"\n              rows={3}\n            />\n            <div className=\"flex flex-wrap gap-3\">\n              <select className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\">\n                <option>🌳 Forest Protection</option>\n                <option>🏭 Air Quality</option>\n                <option>💧 Water Management</option>\n                <option>🦋 Biodiversity</option>\n                <option>♻️ Waste Reduction</option>\n              </select>\n              <input \n                type=\"number\" \n                placeholder=\"Target %\" \n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white w-24 focus:border-cyan-400\"\n              />\n              <input \n                type=\"date\" \n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n              />\n            </div>\n            <button className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-cyan-500/25\">\n              🚀 Create Smart Commitment\n            </button>\n          </div>\n        </div>\n\n        {/* Sample Posts *\n        <div className=\"space-y-6\">\n          {/* Government Official Post *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300 shadow-xl\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mr-4\">\n                <span className=\"text-white font-bold text-lg\">🏛️</span>\n              </div>\n              <div>\n                <h3 className=\"text-white font-semibold flex items-center\">\n                  Mayor Sarah Johnson\n                  <span className=\"ml-2 bg-blue-500/20 text-blue-400 text-xs px-2 py-1 rounded-full border border-blue-500/30\">\n                    VERIFIED OFFICIAL\n                  </span>\n                </h3>\n                <p className=\"text-gray-400 text-sm\">Government Official • 2 hours ago</p>\n              </div>\n            </div>\n            \n            <p className=\"text-white mb-4 leading-relaxed\">\n              🎯 <strong>MAJOR COMMITMENT:</strong> Reducing our city's air pollution by 30% over the next 6 months! \n              New electric bus fleet rolling out next week. Real satellite data will track our progress. \n              <span className=\"text-cyan-400\">#CleanAirInitiative #CivicXChain</span>\n            </p>\n            \n            {/* Progress Bar *\n            <div className=\"bg-gradient-to-r from-green-500/20 to-cyan-500/20 rounded-lg p-4 mb-4 border border-green-500/20\">\n              <div className=\"flex justify-between text-sm text-green-400 mb-2\">\n                <span>🛰️ Satellite Verified Progress</span>\n                <span className=\"font-mono\">15% / 30%</span>\n              </div>\n              <div className=\"w-full bg-gray-800 rounded-full h-3 overflow-hidden\">\n                <div \n                  className=\"bg-gradient-to-r from-green-400 to-cyan-400 h-3 rounded-full transition-all duration-1000 shadow-lg shadow-green-400/30\" \n                  style={{width: '50%'}}\n                ></div>\n              </div>\n              <p className=\"text-xs text-gray-400 mt-2\">⏱️ 4 months remaining • 💰 50 ETH staked</p>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex space-x-6\">\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-green-400 transition-colors\">\n                  <span>👍</span>\n                  <span className=\"text-sm\">89 supports</span>\n                </button>\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-blue-400 transition-colors\">\n                  <span>💬</span>\n                  <span className=\"text-sm\">23 comments</span>\n                </button>\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-purple-400 transition-colors\">\n                  <span>📤</span>\n                  <span className=\"text-sm\">Share</span>\n                </button>\n              </div>\n              <button className=\"bg-green-500/20 hover:bg-green-500/30 text-green-400 px-4 py-2 rounded-lg text-sm border border-green-500/30 transition-all\">\n                👀 Monitor Progress\n              </button>\n            </div>\n          </div>\n\n          {/* Citizen Post *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6 hover:border-purple-500/40 transition-all duration-300 shadow-xl\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mr-4\">\n                <span className=\"text-white font-bold text-lg\">🌱</span>\n              </div>\n              <div>\n                <h3 className=\"text-white font-semibold flex items-center\">\n                  Alex Chen\n                  <span className=\"ml-2 bg-purple-500/20 text-purple-400 text-xs px-2 py-1 rounded-full border border-purple-500/30\">\n                    ECO CITIZEN\n                  </span>\n                </h3>\n                <p className=\"text-gray-400 text-sm\">Environmental Activist • 5 hours ago</p>\n              </div>\n            </div>\n            \n            <p className=\"text-white mb-4 leading-relaxed\">\n              🌳 Just completed my personal commitment to plant 100 trees in my neighborhood! \n              Here's the proof from satellite imagery. Earned my first NFT badge! 🏆\n              <span className=\"text-purple-400\">#TreePlanting #CivicXChain #PersonalCommitment</span>\n            </p>\n            \n            {/* Achievement Badge *\n            <div className=\"bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-lg p-4 mb-4 border border-purple-500/20\">\n              <div className=\"flex items-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-purple-400 to-pink-400 rounded-lg flex items-center justify-center mr-4\">\n                  <span className=\"text-2xl\">🏆</span>\n                </div>\n                <div>\n                  <h4 className=\"text-purple-400 font-semibold\">Forest Guardian Badge</h4>\n                  <p className=\"text-gray-400 text-sm\">NFT #1337 • Blockchain Verified</p>\n                  <p className=\"text-xs text-gray-500\">Achievement unlocked for planting 100+ trees</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex space-x-6\">\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-purple-400 transition-colors\">\n                  <span>👏</span>\n                  <span className=\"text-sm\">156 applause</span>\n                </button>\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-blue-400 transition-colors\">\n                  <span>💬</span>\n                  <span className=\"text-sm\">34 comments</span>\n                </button>\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-cyan-400 transition-colors\">\n                  <span>🔄</span>\n                  <span className=\"text-sm\">Repost</span>\n                </button>\n              </div>\n              <button className=\"bg-purple-500/20 hover:bg-purple-500/30 text-purple-400 px-4 py-2 rounded-lg text-sm border border-purple-500/30 transition-all\">\n                🎉 Congratulate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n  */\n\n/*'use client';\n\nimport { useState, useEffect } from 'react';\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Form state for creating new commitments\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  const API_BASE_URL = process.env.NODE_ENV === 'development' \n    ? 'http://localhost:8000' \n    : 'https://your-production-api-url.com';\n\n  // Fetch all data on component mount\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch commitments\n      const commitmentsResponse = await fetch(`${API_BASE_URL}/commitments`);\n      if (commitmentsResponse.ok) {\n        const commitmentsData = await commitmentsResponse.json();\n        setCommitments(commitmentsData);\n      }\n\n      // Fetch environmental data\n      const envResponse = await fetch(`${API_BASE_URL}/environmental-data`);\n      if (envResponse.ok) {\n        const envData = await envResponse.json();\n        setEnvironmentalData(envData);\n      }\n\n      // Fetch satellite data\n      const satResponse = await fetch(`${API_BASE_URL}/satellite-data`);\n      if (satResponse.ok) {\n        const satData = await satResponse.json();\n        setSatelliteData(satData);\n      }\n\n    } catch (err) {\n      setError('Failed to fetch data. Please check your connection.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/commitments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...newCommitment,\n          target_value: parseFloat(newCommitment.target_value),\n          stake_amount: parseFloat(newCommitment.stake_amount)\n        }),\n      });\n\n      if (response.ok) {\n        const createdCommitment = await response.json();\n        setCommitments(prev => [createdCommitment, ...prev]);\n        \n        // Reset form\n        setNewCommitment({\n          title: '',\n          description: '',\n          category: 'forest_protection',\n          target_value: '',\n          deadline: '',\n          official_name: '',\n          official_role: '',\n          stake_amount: ''\n        });\n        \n        alert('Commitment created successfully!');\n      } else {\n        throw new Error('Failed to create commitment');\n      }\n    } catch (err) {\n      alert('Error creating commitment. Please try again.');\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': '🌳',\n      'air_quality': '🏭',\n      'water_management': '💧',\n      'biodiversity': '🦋',\n      'waste_reduction': '♻️'\n    };\n    return icons[category] || '🌍';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900\">\n      {/* Cyberpunk Navigation *\n      <nav className=\"bg-black/40 backdrop-blur-xl border-b border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-black font-bold text-sm\">C</span>\n                </div>\n                <h1 className=\"text-2xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                  CivicXChain\n                </h1>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button \n                onClick={fetchAllData}\n                className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-4 py-2 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-green-500/25\"\n              >\n                🔄 Refresh Data\n              </button>\n              <button className=\"bg-cyan-500/20 hover:bg-cyan-500/30 border border-cyan-500/50 text-cyan-400 px-4 py-2 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/25\">\n                Connect Wallet\n              </button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Error Message *\n      {error && (\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"bg-red-500/20 border border-red-500/50 text-red-400 px-4 py-3 rounded-lg\">\n            ⚠️ {error}\n          </div>\n        </div>\n      )}\n\n      {/* Hero Section *\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-transparent to-purple-500/10\"></div>\n        <div className=\"max-w-7xl mx-auto px-4 py-12\">\n          <div className=\"text-center\">\n            <h2 className=\"text-5xl font-bold text-white mb-4\">\n              The Future of \n              <span className=\"bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\"> Civic Accountability</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-8 max-w-3xl mx-auto\">\n              Where government officials and citizens unite through blockchain-verified environmental commitments. \n              Track progress, earn rewards, and build a sustainable future together.\n            </p>\n            \n            {/* Real-time Environmental Data Display *\n            {environmentalData && (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto mt-8\">\n                <div className=\"bg-black/30 backdrop-blur-xl rounded-lg p-4 border border-cyan-500/20\">\n                  <div className=\"text-cyan-400 text-sm\">PM2.5 Level</div>\n                  <div className=\"text-2xl font-bold text-white\">{environmentalData.pm25} μg/m³</div>\n                </div>\n                <div className=\"bg-black/30 backdrop-blur-xl rounded-lg p-4 border border-green-500/20\">\n                  <div className=\"text-green-400 text-sm\">Forest Cover</div>\n                  <div className=\"text-2xl font-bold text-white\">{environmentalData.forest_cover}%</div>\n                </div>\n                <div className=\"bg-black/30 backdrop-blur-xl rounded-lg p-4 border border-blue-500/20\">\n                  <div className=\"text-blue-400 text-sm\">Water Quality</div>\n                  <div className=\"text-2xl font-bold text-white\">{environmentalData.water_quality}/100</div>\n                </div>\n                <div className=\"bg-black/30 backdrop-blur-xl rounded-lg p-4 border border-purple-500/20\">\n                  <div className=\"text-purple-400 text-sm\">CO2 Level</div>\n                  <div className=\"text-2xl font-bold text-white\">{environmentalData.co2} ppm</div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Feed *\n      <div className=\"max-w-4xl mx-auto px-4 pb-12\">\n        {/* Create Commitment Section *\n        <div className=\"bg-black/30 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8 shadow-2xl\">\n          <h3 className=\"text-xl text-white mb-4 flex items-center\">\n            <span className=\"w-2 h-2 bg-cyan-400 rounded-full mr-3 animate-pulse\"></span>\n            Create Your Environmental Commitment\n          </h3>\n          \n          <form onSubmit={handleCreateCommitment} className=\"space-y-4\">\n            <input\n              type=\"text\"\n              placeholder=\"Commitment title...\"\n              value={newCommitment.title}\n              onChange={(e) => setNewCommitment(prev => ({ ...prev, title: e.target.value }))}\n              className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg p-4 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400 transition-all\"\n              required\n            />\n            \n            <textarea \n              placeholder=\"Detailed description of your commitment...\"\n              value={newCommitment.description}\n              onChange={(e) => setNewCommitment(prev => ({ ...prev, description: e.target.value }))}\n              className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg p-4 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400 transition-all\"\n              rows={3}\n              required\n            />\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <select \n                value={newCommitment.category}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, category: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n              >\n                <option value=\"forest_protection\">🌳 Forest Protection</option>\n                <option value=\"air_quality\">🏭 Air Quality</option>\n                <option value=\"water_management\">💧 Water Management</option>\n                <option value=\"biodiversity\">🦋 Biodiversity</option>\n                <option value=\"waste_reduction\">♻️ Waste Reduction</option>\n              </select>\n              \n              <input \n                type=\"number\" \n                placeholder=\"Target %\" \n                value={newCommitment.target_value}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, target_value: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                required\n              />\n              \n              <input \n                type=\"date\" \n                value={newCommitment.deadline}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, deadline: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                required\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Official Name\"\n                value={newCommitment.official_name}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, official_name: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                required\n              />\n              \n              <input\n                type=\"text\"\n                placeholder=\"Official Role\"\n                value={newCommitment.official_role}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, official_role: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                required\n              />\n              \n              <input\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"Stake Amount (ETH)\"\n                value={newCommitment.stake_amount}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, stake_amount: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                required\n              />\n            </div>\n            \n            <button \n              type=\"submit\"\n              className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-cyan-500/25\"\n            >\n              🚀 Create Smart Commitment\n            </button>\n          </form>\n        </div>\n\n        {/* Satellite Data Section *\n        {satelliteData && (\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-green-500/20 p-6 mb-8 shadow-xl\">\n            <h3 className=\"text-xl text-white mb-4 flex items-center\">\n              <span className=\"text-2xl mr-3\">🛰️</span>\n              Live Satellite Monitoring\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <div className=\"text-green-400 text-sm\">Location</div>\n                <div className=\"text-white font-semibold\">{satelliteData.location}</div>\n              </div>\n              <div>\n                <div className=\"text-green-400 text-sm\">Forest Cover</div>\n                <div className=\"text-white font-semibold\">{satelliteData.forest_cover_percentage}%</div>\n              </div>\n              <div>\n                <div className=\"text-green-400 text-sm\">Confidence Score</div>\n                <div className=\"text-white font-semibold\">{satelliteData.confidence_score}%</div>\n              </div>\n            </div>\n            {satelliteData.change_detected && (\n              <div className=\"mt-4 bg-yellow-500/20 border border-yellow-500/50 text-yellow-400 px-4 py-2 rounded-lg\">\n                ⚠️ Environmental change detected! Last updated: {formatDate(satelliteData.last_updated)}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Commitments Feed *\n        <div className=\"space-y-6\">\n          {commitments.length === 0 ? (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n              <div className=\"text-6xl mb-4\">🌱</div>\n              <h3 className=\"text-white text-xl mb-2\">No commitments yet</h3>\n              <p className=\"text-gray-400\">Be the first to create an environmental commitment!</p>\n            </div>\n          ) : (\n            commitments.map((commitment) => (\n              <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300 shadow-xl\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mr-4\">\n                    <span className=\"text-white font-bold text-lg\">\n                      {getCategoryIcon(commitment.category)}\n                    </span>\n                  </div>\n                  <div>\n                    <h3 className=\"text-white font-semibold flex items-center\">\n                      {commitment.official_name}\n                      <span className=\"ml-2 bg-blue-500/20 text-blue-400 text-xs px-2 py-1 rounded-full border border-blue-500/30\">\n                        {commitment.official_role}\n                      </span>\n                    </h3>\n                    <p className=\"text-gray-400 text-sm\">\n                      {formatDate(commitment.created_at)} • {commitment.category.replace('_', ' ').toUpperCase()}\n                    </p>\n                  </div>\n                </div>\n                \n                <h4 className=\"text-white font-semibold text-lg mb-2\">{commitment.title}</h4>\n                <p className=\"text-white mb-4 leading-relaxed\">{commitment.description}</p>\n                \n                {/* Progress Bar *\n                <div className=\"bg-gradient-to-r from-green-500/20 to-cyan-500/20 rounded-lg p-4 mb-4 border border-green-500/20\">\n                  <div className=\"flex justify-between text-sm text-green-400 mb-2\">\n                    <span>\n                      {commitment.satellite_verified ? '🛰️ Satellite Verified' : '📊 Self Reported'} Progress\n                    </span>\n                    <span className=\"font-mono\">\n                      {commitment.current_progress}% / {commitment.target_value}%\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-800 rounded-full h-3 overflow-hidden\">\n                    <div \n                      className=\"bg-gradient-to-r from-green-400 to-cyan-400 h-3 rounded-full transition-all duration-1000 shadow-lg shadow-green-400/30\" \n                      style={{width: `${calculateProgress(commitment.current_progress, commitment.target_value)}%`}}\n                    ></div>\n                  </div>\n                  <p className=\"text-xs text-gray-400 mt-2\">\n                    ⏱️ Deadline: {formatDate(commitment.deadline)} • 💰 {commitment.stake_amount} ETH staked\n                  </p>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex space-x-6\">\n                    <button className=\"flex items-center space-x-2 text-gray-400 hover:text-green-400 transition-colors\">\n                      <span>👍</span>\n                      <span className=\"text-sm\">Support</span>\n                    </button>\n                    <button className=\"flex items-center space-x-2 text-gray-400 hover:text-blue-400 transition-colors\">\n                      <span>💬</span>\n                      <span className=\"text-sm\">Comment</span>\n                    </button>\n                    <button className=\"flex items-center space-x-2 text-gray-400 hover:text-purple-400 transition-colors\">\n                      <span>📤</span>\n                      <span className=\"text-sm\">Share</span>\n                    </button>\n                  </div>\n                  <span className={`px-3 py-1 rounded-full text-xs font-semibold ${\n                    commitment.status === 'active' ? 'bg-green-500/20 text-green-400 border border-green-500/30' :\n                    commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30' :\n                    'bg-red-500/20 text-red-400 border border-red-500/30'\n                  }`}>\n                    {commitment.status.toUpperCase()}\n                  </span>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}*/\n\n\n/*\n'use client';\n\nimport { useState, useEffect } from 'react';\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Form state for creating new commitments\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  // Proper API configuration\n  const API_BASE_URL = process.env.NODE_ENV === 'development' \n    ? 'https://api.databutton.com/_projects/f4d95df8-c90d-4815-9705-a83827aa1133/dbtn/devx/app/routes'\n    : 'https://api.databutton.com/_projects/f4d95df8-c90d-4815-9705-a83827aa1133/dbtn/prodx/app/routes';\n\n  // Helper function for API calls with proper error handling\n  const apiCall = async (endpoint: string, options: RequestInit = {}) => {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      credentials: 'include', // Important for authentication\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`API Error: ${response.status} - ${errorText}`);\n    }\n\n    return response.json();\n  };\n\n  // Fetch all data on component mount\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch commitments with error handling\n      try {\n        const commitmentsData = await apiCall('/get_all_commitments');\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        // Set mock data if API fails (for development)\n        setCommitments([]);\n      }\n\n      // Fetch environmental data with error handling\n      try {\n        const envData = await apiCall('/get_environmental_data');\n        setEnvironmentalData(envData);\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        // Set mock data if API fails\n        setEnvironmentalData({\n          location: \"Sample Location\",\n          pm25: 25.5,\n          co2: 410,\n          forest_cover: 75.2,\n          water_quality: 82,\n          timestamp: new Date().toISOString(),\n          source: \"Mock Data\"\n        });\n      }\n\n      // Fetch satellite data with error handling\n      try {\n        const satData = await apiCall('/get_satellite_data?commitmentId=general');\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        // Set mock data if API fails\n        setSatelliteData({\n          location: \"Sample Region\",\n          forest_cover_percentage: 78.5,\n          change_detected: false,\n          last_updated: new Date().toISOString(),\n          confidence_score: 94\n        });\n      }\n\n    } catch (err) {\n      setError('Failed to fetch data. Using demo mode.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const createdCommitment = await apiCall('/create_commitment', {\n        method: 'POST',\n        body: JSON.stringify(commitmentData),\n      });\n\n      setCommitments(prev => [createdCommitment, ...prev]);\n      \n      // Reset form\n      setNewCommitment({\n        title: '',\n        description: '',\n        category: 'forest_protection',\n        target_value: '',\n        deadline: '',\n        official_name: '',\n        official_role: '',\n        stake_amount: ''\n      });\n      \n      alert('Commitment created successfully!');\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      alert(`Error creating commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  // Rest of your component methods remain the same...\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': '🌳',\n      'air_quality': '🏭',\n      'water_management': '💧',\n      'biodiversity': '🦋',\n      'waste_reduction': '♻️'\n    };\n    return icons[category] || '🌍';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  // Your existing JSX return statement stays exactly the same...\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    // Your existing JSX remains exactly the same - just copy it from your current file\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900\">\n      {/* Keep all your existing JSX exactly as it is *\n      {/* Just replace the part above this comment *\n    </div>\n  );\n}\n*/\n\n\n\n/*\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport CommitmentDashboard from './components/CommitmentDashboard';\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentView, setCurrentView] = useState<'feed' | 'dashboard'>('feed');\n\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  const API_BASE_URL = process.env.NODE_ENV === 'development'\n    ? 'https://api.databutton.com/_projects/f4d95df8-c90d-4815-9705-a83827aa1133/dbtn/devx/app/routes'\n    : 'https://api.databutton.com/_projects/f4d95df8-c90d-4815-9705-a83827aa1133/dbtn/prodx/app/routes';\n\n  const apiCall = async (endpoint: string, options: RequestInit = {}) => {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`API Error: ${response.status} - ${errorText}`);\n    }\n\n    return response.json();\n  };\n\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const commitmentsData = await apiCall('/get_all_commitments');\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        setCommitments([]);\n      }\n\n      try {\n        const envData = await apiCall('/get_environmental_data');\n        setEnvironmentalData(envData);\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        setEnvironmentalData({\n          location: \"Sample Location\",\n          pm25: 25.5,\n          co2: 410,\n          forest_cover: 75.2,\n          water_quality: 82,\n          timestamp: new Date().toISOString(),\n          source: \"Mock Data\"\n        });\n      }\n\n      try {\n        const satData = await apiCall('/get_satellite_data?commitmentId=general');\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        setSatelliteData({\n          location: \"Sample Region\",\n          forest_cover_percentage: 78.5,\n          change_detected: false,\n          last_updated: new Date().toISOString(),\n          confidence_score: 94\n        });\n      }\n\n    } catch (err) {\n      setError('Failed to fetch data. Using demo mode.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const createdCommitment = await apiCall('/create_commitment', {\n        method: 'POST',\n        body: JSON.stringify(commitmentData),\n      });\n\n      setCommitments(prev => [createdCommitment, ...prev]);\n\n      setNewCommitment({\n        title: '',\n        description: '',\n        category: 'forest_protection',\n        target_value: '',\n        deadline: '',\n        official_name: '',\n        official_role: '',\n        stake_amount: ''\n      });\n\n      alert('Commitment created successfully!');\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      alert(`Error creating commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  const handleUpdateProgress = async (commitmentId: string, newProgress: number) => {\n    try {\n      const response = await apiCall('/update_commitment_progress', {\n        method: 'POST',\n        body: JSON.stringify({\n          commitment_id: commitmentId,\n          new_progress: newProgress\n        }),\n      });\n\n      setCommitments(prev => prev.map(c =>\n        c.id === commitmentId\n          ? { ...c, current_progress: newProgress }\n          : c\n      ));\n\n      alert('Progress updated successfully!');\n    } catch (err) {\n      alert('Error updating progress. Please try again.');\n      console.error('Error updating progress:', err);\n    }\n  };\n\n  const handleClaimReward = async (commitmentId: string) => {\n    try {\n      const response = await apiCall('/claim_reward', {\n        method: 'POST',\n        body: JSON.stringify({ commitment_id: commitmentId }),\n      });\n\n      alert('Reward claimed successfully!');\n    } catch (err) {\n      alert('Error claiming reward. Please try again.');\n      console.error('Error claiming reward:', err);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': '🌳',\n      'air_quality': '🏭',\n      'water_management': '💧',\n      'biodiversity': '🦋',\n      'waste_reduction': '♻️'\n    };\n    return icons[category] || '🌍';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white p-6\">\n      <div className=\"flex items-center space-x-4 mb-6\">\n        <button\n          onClick={() => setCurrentView('feed')}\n          className={`px-4 py-2 rounded-lg transition-all duration-300 ${\n            currentView === 'feed'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50'\n              : 'text-gray-400 hover:text-cyan-400'\n          }`}\n        >\n          Feed\n        </button>\n        <button\n          onClick={() => setCurrentView('dashboard')}\n          className={`px-4 py-2 rounded-lg transition-all duration-300 ${\n            currentView === 'dashboard'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50'\n              : 'text-gray-400 hover:text-cyan-400'\n          }`}\n        >\n          Dashboard\n        </button>\n      </div>\n\n      {currentView === 'dashboard' ? (\n        <CommitmentDashboard\n          commitments={commitments}\n          onUpdateProgress={handleUpdateProgress}\n          onClaimReward={handleClaimReward}\n        />\n      ) : (\n        <div>\n          {/* Your existing feed JSX goes here — e.g., map commitments, display environmental data, etc. *\n          <p>🌱 Feed content goes here (replace with your existing JSX)...</p>\n        </div>\n      )}\n    </div>\n  );\n}\n*/\n\n/*\n'use client';\n\nimport { useState, useEffect } from 'react';\n// For standalone project, you'll need to install and configure these:\n// npm install sonner\n// You'll also need to create your own API client or use fetch\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\n// Fixed brain client with proper return types\nconst brain = {\n  get_all_commitments: async () => ({ \n    json: async () => ({ \n      commitments: [] as Commitment[] \n    }) \n  }),\n  get_environmental_data: async () => ({ \n    json: async (): Promise<EnvironmentalData> => ({\n      location: \"Sample Location\",\n      pm25: 25.5,\n      co2: 410,\n      forest_cover: 75.2,\n      water_quality: 82,\n      timestamp: new Date().toISOString(),\n      source: \"Mock Data\"\n    }) \n  }),\n  get_satellite_data: async (params: { commitmentId: string }) => ({ \n    json: async (): Promise<SatelliteData> => ({\n      location: \"Sample Region\",\n      forest_cover_percentage: 78.5,\n      change_detected: false,\n      last_updated: new Date().toISOString(),\n      confidence_score: 94\n    }) \n  }),\n  create_commitment: async (data: CreateCommitmentRequest) => ({ \n    json: async (): Promise<Commitment> => ({\n      id: Date.now().toString(),\n      ...data,\n      current_progress: 0,\n      status: 'active',\n      created_at: new Date().toISOString(),\n      satellite_verified: false\n    }) \n  }),\n  update_commitment_progress: async (data: { commitment_id: string; new_progress: number }) => ({ \n    json: async () => ({ success: true, ...data }) \n  }),\n  claim_reward: async (data: { commitment_id: string }) => ({ \n    json: async () => ({ success: true, message: 'Reward claimed!', ...data }) \n  }),\n};\n\n// Simple toast implementation - install 'sonner' package: npm install sonner\n// import { toast } from 'sonner';\n// For now, using console.log as placeholder\nconst toast = {\n  success: (msg: string) => console.log('Success:', msg),\n  error: (msg: string) => console.error('Error:', msg),\n};\n\n// Placeholder CommitmentDashboard component - you'll need to create this\nconst CommitmentDashboard = ({ commitments, onUpdateProgress, onClaimReward }: {\n  commitments: Commitment[];\n  onUpdateProgress: (id: string, progress: number) => void;\n  onClaimReward: (id: string) => void;\n}) => (\n  <div className=\"text-white\">\n    <h2 className=\"text-2xl font-bold mb-4\">Commitment Dashboard</h2>\n    <div className=\"grid gap-4\">\n      {commitments.map(commitment => (\n        <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6\">\n          <h3 className=\"text-lg font-semibold\">{commitment.title}</h3>\n          <p className=\"text-gray-400 mb-2\">{commitment.description}</p>\n          <div className=\"flex gap-4 items-center\">\n            <span>Progress: {commitment.current_progress}%</span>\n            <button \n              onClick={() => onUpdateProgress(commitment.id, Math.min(commitment.current_progress + 10, 100))}\n              className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-3 py-1 rounded\"\n            >\n              Update +10%\n            </button>\n            {commitment.current_progress >= commitment.target_value && (\n              <button \n                onClick={() => onClaimReward(commitment.id)}\n                className=\"bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-500/50 text-yellow-400 px-3 py-1 rounded\"\n              >\n                Claim Reward\n              </button>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentView, setCurrentView] = useState<'feed' | 'dashboard'>('feed');\n\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const commitmentsResponse = await brain.get_all_commitments();\n        const commitmentsData = await commitmentsResponse.json();\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        setCommitments([]);\n      }\n\n      try {\n        const envResponse = await brain.get_environmental_data();\n        const envData = await envResponse.json();\n        setEnvironmentalData(envData);\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        // Fallback data with proper type\n        setEnvironmentalData({\n          location: \"Sample Location\",\n          pm25: 25.5,\n          co2: 410,\n          forest_cover: 75.2,\n          water_quality: 82,\n          timestamp: new Date().toISOString(),\n          source: \"Mock Data\"\n        });\n      }\n\n      try {\n        // Fixed: pass object with commitmentId property\n        const satResponse = await brain.get_satellite_data({ commitmentId: 'general' });\n        const satData = await satResponse.json();\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        // Fallback data with proper type\n        setSatelliteData({\n          location: \"Sample Region\",\n          forest_cover_percentage: 78.5,\n          change_detected: false,\n          last_updated: new Date().toISOString(),\n          confidence_score: 94\n        });\n      }\n\n    } catch (err) {\n      setError('Failed to fetch data. Using demo mode.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const response = await brain.create_commitment(commitmentData);\n      const createdCommitment = await response.json();\n\n      setCommitments(prev => [createdCommitment, ...prev]);\n\n      setNewCommitment({\n        title: '',\n        description: '',\n        category: 'forest_protection',\n        target_value: '',\n        deadline: '',\n        official_name: '',\n        official_role: '',\n        stake_amount: ''\n      });\n\n      toast.success('Commitment created successfully!');\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      toast.error(`Error creating commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  const handleUpdateProgress = async (commitmentId: string, newProgress: number) => {\n    try {\n      const response = await brain.update_commitment_progress({\n        commitment_id: commitmentId,\n        new_progress: newProgress\n      });\n\n      setCommitments(prev => prev.map(c =>\n        c.id === commitmentId\n          ? { ...c, current_progress: newProgress }\n          : c\n      ));\n\n      toast.success('Progress updated successfully!');\n    } catch (err) {\n      toast.error('Error updating progress. Please try again.');\n      console.error('Error updating progress:', err);\n    }\n  };\n\n  const handleClaimReward = async (commitmentId: string) => {\n    try {\n      const response = await brain.claim_reward({ commitment_id: commitmentId });\n      toast.success('Reward claimed successfully!');\n    } catch (err) {\n      toast.error('Error claiming reward. Please try again.');\n      console.error('Error claiming reward:', err);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': '🌳',\n      'air_quality': '🏭',\n      'water_management': '💧',\n      'biodiversity': '🦋',\n      'waste_reduction': '♻️'\n    };\n    return icons[category] || '🌍';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white p-6\">\n      {/* Header *\n      <div className=\"max-w-7xl mx-auto mb-8\">\n        <h1 className=\"text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 mb-4\">\n          🌍 EcoChain Governance\n        </h1>\n        <p className=\"text-xl text-gray-300 mb-6\">\n          Transparent environmental accountability through blockchain technology\n        </p>\n      </div>\n\n      {/* Navigation *\n      <div className=\"max-w-7xl mx-auto flex items-center space-x-4 mb-8\">\n        <button\n          onClick={() => setCurrentView('feed')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'feed'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          📡 Social Feed\n        </button>\n        <button\n          onClick={() => setCurrentView('dashboard')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'dashboard'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          📊 Dashboard\n        </button>\n      </div>\n\n      {currentView === 'dashboard' ? (\n        <CommitmentDashboard\n          commitments={commitments}\n          onUpdateProgress={handleUpdateProgress}\n          onClaimReward={handleClaimReward}\n        />\n      ) : (\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Environmental Data Cards *\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {environmentalData && (\n              <>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-red-500/20 p-6\">\n                  <div className=\"text-red-400 text-sm font-medium mb-2\">Air Quality (PM2.5)</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.pm25} μg/m³</div>\n                  <div className=\"text-xs text-gray-400\">{environmentalData.location}</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-orange-500/20 p-6\">\n                  <div className=\"text-orange-400 text-sm font-medium mb-2\">CO2 Levels</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.co2} ppm</div>\n                  <div className=\"text-xs text-gray-400\">Atmospheric Reading</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-green-500/20 p-6\">\n                  <div className=\"text-green-400 text-sm font-medium mb-2\">Forest Cover</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.forest_cover}%</div>\n                  <div className=\"text-xs text-gray-400\">Regional Coverage</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6\">\n                  <div className=\"text-blue-400 text-sm font-medium mb-2\">Water Quality</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.water_quality}%</div>\n                  <div className=\"text-xs text-gray-400\">Quality Index</div>\n                </div>\n              </>\n            )}\n          </div>\n\n          {/* Satellite Data *\n          {satelliteData && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6 mb-8\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mr-3\">\n                  🛰️\n                </div>\n                <div>\n                  <h3 className=\"text-white font-semibold\">Satellite Monitoring</h3>\n                  <p className=\"text-gray-400 text-sm\">Real-time environmental verification</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Location</div>\n                  <div className=\"text-white font-medium\">{satelliteData.location}</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Forest Coverage</div>\n                  <div className=\"text-white font-medium\">{satelliteData.forest_cover_percentage}%</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Confidence Score</div>\n                  <div className=\"text-white font-medium\">{satelliteData.confidence_score}%</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Commitment Creation Form *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center mr-3\">\n                ➕\n              </span>\n              Create New Commitment\n            </h2>\n            <form onSubmit={handleCreateCommitment} className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Title</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.title}\n                  onChange={(e) => setNewCommitment({...newCommitment, title: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Commitment title\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Category</label>\n                <select \n                  value={newCommitment.category}\n                  onChange={(e) => setNewCommitment({...newCommitment, category: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                >\n                  <option value=\"forest_protection\">🌳 Forest Protection</option>\n                  <option value=\"air_quality\">🏭 Air Quality</option>\n                  <option value=\"water_management\">💧 Water Management</option>\n                  <option value=\"biodiversity\">🦋 Biodiversity</option>\n                  <option value=\"waste_reduction\">♻️ Waste Reduction</option>\n                </select>\n              </div>\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Description</label>\n                <textarea\n                  value={newCommitment.description}\n                  onChange={(e) => setNewCommitment({...newCommitment, description: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Describe your environmental commitment\"\n                  rows={3}\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Target Value (%)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.target_value}\n                  onChange={(e) => setNewCommitment({...newCommitment, target_value: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Target percentage\"\n                  min=\"0\"\n                  max=\"100\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Deadline</label>\n                <input\n                  type=\"date\"\n                  value={newCommitment.deadline}\n                  onChange={(e) => setNewCommitment({...newCommitment, deadline: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Name</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_name}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_name: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your name\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Role</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_role}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_role: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your role/position\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Stake Amount (ETH)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.stake_amount}\n                  onChange={(e) => setNewCommitment({...newCommitment, stake_amount: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Stake amount\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  required\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <button\n                  type=\"submit\"\n                  className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl\"\n                >\n                  Create Commitment\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {/* Commitments Feed *\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-white flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-400 rounded-lg flex items-center justify-center mr-3\">\n                📋\n              </span>\n              Recent Commitments\n            </h2>\n            {commitments.map((commitment) => (\n              <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center mr-4\">\n                      {getCategoryIcon(commitment.category)}\n                    </div>\n                    <div>\n                      <h3 className=\"text-white font-semibold\">{commitment.official_name}</h3>\n                      <p className=\"text-gray-400 text-sm\">{commitment.official_role}</p>\n                    </div>\n                  </div>\n                  <div className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                    commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                    commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n                    'bg-red-500/20 text-red-400'\n                  }`}>\n                    {commitment.status.toUpperCase()}\n                  </div>\n                </div>\n                <h4 className=\"text-white font-semibold text-lg mb-2\">{commitment.title}</h4>\n                <p className=\"text-gray-300 mb-4\">{commitment.description}</p>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Progress</div>\n                    <div className=\"text-white font-medium\">{commitment.current_progress}% / {commitment.target_value}%</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Deadline</div>\n                    <div className=\"text-white font-medium\">{formatDate(commitment.deadline)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Stake</div>\n                    <div className=\"text-white font-medium\">{commitment.stake_amount} ETH</div>\n                  </div>\n                </div>\n                <div className=\"w-full bg-gray-800 rounded-full h-3 mb-4\">\n                  <div \n                    className=\"bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000\" \n                    style={{width: `${calculateProgress(commitment.current_progress, commitment.target_value)}%`}}\n                  ></div>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"text-xs text-gray-400\">\n                    Created: {formatDate(commitment.created_at)} • \n                    {commitment.satellite_verified ? ' 🛰️ Satellite Verified' : ' 📊 Self-reported'}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {commitments.length === 0 && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n              <div className=\"text-6xl mb-4\">🌱</div>\n              <h3 className=\"text-white text-xl mb-2\">No commitments yet</h3>\n              <p className=\"text-gray-400\">Be the first to create an environmental commitment!</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n  */\n\n\n\n/*\n'use client';\n\nimport { useState, useEffect } from 'react';\n// For standalone project, you'll need to install and configure these:\n// npm install sonner\n// You'll also need to create your own API client or use fetch\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\n// Fixed brain client with proper return types\nconst brain = {\n  get_all_commitments: async () => ({ \n    json: async () => ({ \n      commitments: [] as Commitment[] \n    }) \n  }),\n  get_environmental_data: async () => ({ \n    json: async (): Promise<EnvironmentalData> => ({\n      location: \"Sample Location\",\n      pm25: 25.5,\n      co2: 410,\n      forest_cover: 75.2,\n      water_quality: 82,\n      timestamp: new Date().toISOString(),\n      source: \"Mock Data\"\n    }) \n  }),\n  get_satellite_data: async (params: { commitmentId: string }) => ({ \n    json: async (): Promise<SatelliteData> => ({\n      location: \"Sample Region\",\n      forest_cover_percentage: 78.5,\n      change_detected: false,\n      last_updated: new Date().toISOString(),\n      confidence_score: 94\n    }) \n  }),\n  create_commitment: async (data: CreateCommitmentRequest) => ({ \n    json: async (): Promise<Commitment> => ({\n      id: Date.now().toString(),\n      ...data,\n      current_progress: 0,\n      status: 'active',\n      created_at: new Date().toISOString(),\n      satellite_verified: false\n    }) \n  }),\n  update_commitment_progress: async (data: { commitment_id: string; new_progress: number }) => ({ \n    json: async () => ({ success: true, ...data }) \n  }),\n  claim_reward: async (data: { commitment_id: string }) => ({ \n    json: async () => ({ success: true, message: 'Reward claimed!', ...data }) \n  }),\n};\n\n// Simple toast implementation - install 'sonner' package: npm install sonner\n// import { toast } from 'sonner';\n// For now, using console.log as placeholder\nconst toast = {\n  success: (msg: string) => console.log('Success:', msg),\n  error: (msg: string) => console.error('Error:', msg),\n};\n\n// Placeholder CommitmentDashboard component - you'll need to create this\nconst CommitmentDashboard = ({ commitments, onUpdateProgress, onClaimReward }: {\n  commitments: Commitment[];\n  onUpdateProgress: (id: string, progress: number) => void;\n  onClaimReward: (id: string) => void;\n}) => (\n  <div className=\"text-white\">\n    <h2 className=\"text-2xl font-bold mb-4\">Commitment Dashboard</h2>\n    <div className=\"grid gap-4\">\n      {commitments.map(commitment => (\n        <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6\">\n          <h3 className=\"text-lg font-semibold\">{commitment.title}</h3>\n          <p className=\"text-gray-400 mb-2\">{commitment.description}</p>\n          <div className=\"flex gap-4 items-center\">\n            <span>Progress: {commitment.current_progress}%</span>\n            <button \n              onClick={() => onUpdateProgress(commitment.id, Math.min(commitment.current_progress + 10, 100))}\n              className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-3 py-1 rounded\"\n            >\n              Update +10%\n            </button>\n            {commitment.current_progress >= commitment.target_value && (\n              <button \n                onClick={() => onClaimReward(commitment.id)}\n                className=\"bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-500/50 text-yellow-400 px-3 py-1 rounded\"\n              >\n                Claim Reward\n              </button>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentView, setCurrentView] = useState<'feed' | 'dashboard'>('feed');\n\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const commitmentsResponse = await brain.get_all_commitments();\n        const commitmentsData = await commitmentsResponse.json();\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        setCommitments([]);\n      }\n\n      try {\n        const envResponse = await brain.get_environmental_data();\n        const envData = await envResponse.json();\n        setEnvironmentalData(envData);\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        // Fallback data with proper type\n        setEnvironmentalData({\n          location: \"Sample Location\",\n          pm25: 25.5,\n          co2: 410,\n          forest_cover: 75.2,\n          water_quality: 82,\n          timestamp: new Date().toISOString(),\n          source: \"Mock Data\"\n        });\n      }\n\n      try {\n        // Fixed: pass object with commitmentId property\n        const satResponse = await brain.get_satellite_data({ commitmentId: 'general' });\n        const satData = await satResponse.json();\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        // Fallback data with proper type\n        setSatelliteData({\n          location: \"Sample Region\",\n          forest_cover_percentage: 78.5,\n          change_detected: false,\n          last_updated: new Date().toISOString(),\n          confidence_score: 94\n        });\n      }\n\n    } catch (err) {\n      setError('Failed to fetch data. Using demo mode.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const response = await brain.create_commitment(commitmentData);\n      const createdCommitment = await response.json();\n\n      setCommitments(prev => [createdCommitment, ...prev]);\n\n      setNewCommitment({\n        title: '',\n        description: '',\n        category: 'forest_protection',\n        target_value: '',\n        deadline: '',\n        official_name: '',\n        official_role: '',\n        stake_amount: ''\n      });\n\n      toast.success('Commitment created successfully!');\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      toast.error(`Error creating commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  const handleUpdateProgress = async (commitmentId: string, newProgress: number) => {\n    try {\n      const response = await brain.update_commitment_progress({\n        commitment_id: commitmentId,\n        new_progress: newProgress\n      });\n\n      setCommitments(prev => prev.map(c =>\n        c.id === commitmentId\n          ? { ...c, current_progress: newProgress }\n          : c\n      ));\n\n      toast.success('Progress updated successfully!');\n    } catch (err) {\n      toast.error('Error updating progress. Please try again.');\n      console.error('Error updating progress:', err);\n    }\n  };\n\n  const handleClaimReward = async (commitmentId: string) => {\n    try {\n      const response = await brain.claim_reward({ commitment_id: commitmentId });\n      toast.success('Reward claimed successfully!');\n    } catch (err) {\n      toast.error('Error claiming reward. Please try again.');\n      console.error('Error claiming reward:', err);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': '🌳',\n      'air_quality': '🏭',\n      'water_management': '💧',\n      'biodiversity': '🦋',\n      'waste_reduction': '♻️'\n    };\n    return icons[category] || '🌍';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white p-6\">\n      {/* Header *\n      <div className=\"max-w-7xl mx-auto mb-8\">\n        <h1 className=\"text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 mb-4\">\n          🌍 EcoChain Governance\n        </h1>\n        <p className=\"text-xl text-gray-300 mb-6\">\n          Transparent environmental accountability through blockchain technology\n        </p>\n      </div>\n\n      {/* Navigation *\n      <div className=\"max-w-7xl mx-auto flex items-center space-x-4 mb-8\">\n        <button\n          onClick={() => setCurrentView('feed')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'feed'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          📡 Social Feed\n        </button>\n        <button\n          onClick={() => setCurrentView('dashboard')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'dashboard'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          📊 Dashboard\n        </button>\n      </div>\n\n      {currentView === 'dashboard' ? (\n        <CommitmentDashboard\n          commitments={commitments}\n          onUpdateProgress={handleUpdateProgress}\n          onClaimReward={handleClaimReward}\n        />\n      ) : (\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Environmental Data Cards *\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {environmentalData && (\n              <>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-red-500/20 p-6\">\n                  <div className=\"text-red-400 text-sm font-medium mb-2\">Air Quality (PM2.5)</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.pm25} μg/m³</div>\n                  <div className=\"text-xs text-gray-400\">{environmentalData.location}</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-orange-500/20 p-6\">\n                  <div className=\"text-orange-400 text-sm font-medium mb-2\">CO2 Levels</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.co2} ppm</div>\n                  <div className=\"text-xs text-gray-400\">Atmospheric Reading</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-green-500/20 p-6\">\n                  <div className=\"text-green-400 text-sm font-medium mb-2\">Forest Cover</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.forest_cover}%</div>\n                  <div className=\"text-xs text-gray-400\">Regional Coverage</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6\">\n                  <div className=\"text-blue-400 text-sm font-medium mb-2\">Water Quality</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.water_quality}%</div>\n                  <div className=\"text-xs text-gray-400\">Quality Index</div>\n                </div>\n              </>\n            )}\n          </div>\n\n          {/* Satellite Data *\n          {satelliteData && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6 mb-8\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mr-3\">\n                  🛰️\n                </div>\n                <div>\n                  <h3 className=\"text-white font-semibold\">Satellite Monitoring</h3>\n                  <p className=\"text-gray-400 text-sm\">Real-time environmental verification</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Location</div>\n                  <div className=\"text-white font-medium\">{satelliteData.location}</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Forest Coverage</div>\n                  <div className=\"text-white font-medium\">{satelliteData.forest_cover_percentage}%</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Confidence Score</div>\n                  <div className=\"text-white font-medium\">{satelliteData.confidence_score}%</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Commitment Creation Form *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center mr-3\">\n                ➕\n              </span>\n              Create New Commitment\n            </h2>\n            <form onSubmit={handleCreateCommitment} className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Title</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.title}\n                  onChange={(e) => setNewCommitment({...newCommitment, title: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Commitment title\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Category</label>\n                <select \n                  value={newCommitment.category}\n                  onChange={(e) => setNewCommitment({...newCommitment, category: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                >\n                  <option value=\"forest_protection\">🌳 Forest Protection</option>\n                  <option value=\"air_quality\">🏭 Air Quality</option>\n                  <option value=\"water_management\">💧 Water Management</option>\n                  <option value=\"biodiversity\">🦋 Biodiversity</option>\n                  <option value=\"waste_reduction\">♻️ Waste Reduction</option>\n                </select>\n              </div>\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Description</label>\n                <textarea\n                  value={newCommitment.description}\n                  onChange={(e) => setNewCommitment({...newCommitment, description: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Describe your environmental commitment\"\n                  rows={3}\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Target Value (%)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.target_value}\n                  onChange={(e) => setNewCommitment({...newCommitment, target_value: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Target percentage\"\n                  min=\"0\"\n                  max=\"100\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Deadline</label>\n                <input\n                  type=\"date\"\n                  value={newCommitment.deadline}\n                  onChange={(e) => setNewCommitment({...newCommitment, deadline: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Name</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_name}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_name: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your name\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Role</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_role}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_role: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your role/position\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Stake Amount (ETH)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.stake_amount}\n                  onChange={(e) => setNewCommitment({...newCommitment, stake_amount: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Stake amount\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  required\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <button\n                  type=\"submit\"\n                  className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl\"\n                >\n                  Create Commitment\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {/* Commitments Feed *\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-white flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-400 rounded-lg flex items-center justify-center mr-3\">\n                📋\n              </span>\n              Recent Commitments\n            </h2>\n            {commitments.map((commitment) => (\n              <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center mr-4\">\n                      {getCategoryIcon(commitment.category)}\n                    </div>\n                    <div>\n                      <h3 className=\"text-white font-semibold\">{commitment.official_name}</h3>\n                      <p className=\"text-gray-400 text-sm\">{commitment.official_role}</p>\n                    </div>\n                  </div>\n                  <div className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                    commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                    commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n                    'bg-red-500/20 text-red-400'\n                  }`}>\n                    {commitment.status.toUpperCase()}\n                  </div>\n                </div>\n                <h4 className=\"text-white font-semibold text-lg mb-2\">{commitment.title}</h4>\n                <p className=\"text-gray-300 mb-4\">{commitment.description}</p>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Progress</div>\n                    <div className=\"text-white font-medium\">{commitment.current_progress}% / {commitment.target_value}%</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Deadline</div>\n                    <div className=\"text-white font-medium\">{formatDate(commitment.deadline)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Stake</div>\n                    <div className=\"text-white font-medium\">{commitment.stake_amount} ETH</div>\n                  </div>\n                </div>\n                <div className=\"w-full bg-gray-800 rounded-full h-3 mb-4\">\n                  <div \n                    className=\"bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000\" \n                    style={{width: `${calculateProgress(commitment.current_progress, commitment.target_value)}%`}}\n                  ></div>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"text-xs text-gray-400\">\n                    Created: {formatDate(commitment.created_at)} • \n                    {commitment.satellite_verified ? ' 🛰️ Satellite Verified' : ' 📊 Self-reported'}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {commitments.length === 0 && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n              <div className=\"text-6xl mb-4\">🌱</div>\n              <h3 className=\"text-white text-xl mb-2\">No commitments yet</h3>\n              <p className=\"text-gray-400\">Be the first to create an environmental commitment!</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n*/\n\n/*\n'use client';\n\nimport { useState, useEffect } from 'react';\n// For standalone project, you'll need to install and configure these:\n// npm install sonner\n// You'll also need to create your own API client or use fetch\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n  reward_claimed?: boolean;\n  reward_amount?: number;\n  completion_date?: string;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\n// Fixed brain client with proper return types\nconst brain = {\n  get_all_commitments: async () => ({ \n    ok: true,\n    json: async () => ({ \n      commitments: [] as Commitment[] \n    }) \n  }),\n  get_environmental_data: async () => ({ \n    ok: true,\n    json: async (): Promise<EnvironmentalData> => ({\n      location: \"Sample Location\",\n      pm25: Math.random() * 50 + 10, // Random values for demo\n      co2: Math.random() * 50 + 400,\n      forest_cover: Math.random() * 30 + 60,\n      water_quality: Math.random() * 40 + 60,\n      timestamp: new Date().toISOString(),\n      source: \"Mock Data\"\n    }) \n  }),\n  get_satellite_data: async (params: { commitmentId: string }) => ({ \n    ok: true,\n    json: async (): Promise<SatelliteData> => ({\n      location: \"Sample Region\",\n      forest_cover_percentage: Math.random() * 20 + 70, // Random values for demo\n      change_detected: Math.random() > 0.5,\n      last_updated: new Date().toISOString(),\n      confidence_score: Math.random() * 20 + 80\n    }) \n  }),\n  create_commitment: async (data: CreateCommitmentRequest) => ({ \n    ok: true,\n    json: async (): Promise<Commitment> => ({\n      id: Date.now().toString(),\n      ...data,\n      current_progress: 0,\n      status: 'active',\n      created_at: new Date().toISOString(),\n      satellite_verified: false\n    }) \n  }),\n  update_commitment_progress: async (data: { commitment_id: string; new_progress: number }) => ({ \n    ok: true,\n    json: async () => ({ success: true, ...data }) \n  }),\n  claim_reward: async (data: { commitment_id: string }) => ({ \n    ok: true,\n    json: async () => ({ \n      success: true, \n      message: 'Reward claimed successfully!', \n      reward_amount: Math.random() * 5 + 1, // Random reward between 1-6 ETH\n      transaction_hash: '0x' + Math.random().toString(16).substr(2, 40),\n      ...data \n    }) \n  }),\n};\n\n// Simple toast implementation - install 'sonner' package: npm install sonner\n// import { toast } from 'sonner';\n// For now, using console.log as placeholder\nconst toast = {\n  success: (msg: string) => console.log('Success:', msg),\n  error: (msg: string) => console.error('Error:', msg),\n};\n\n// Placeholder CommitmentDashboard component - you'll need to create this\nconst CommitmentDashboard = ({ commitments, onUpdateProgress, onClaimReward }: {\n  commitments: Commitment[];\n  onUpdateProgress: (id: string, progress: number) => void;\n  onClaimReward: (id: string) => void;\n}) => (\n  <div className=\"text-white\">\n    <h2 className=\"text-2xl font-bold mb-4\">Commitment Dashboard</h2>\n    <div className=\"grid gap-4\">\n      {commitments.map(commitment => (\n        <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6\">\n          <h3 className=\"text-lg font-semibold\">{commitment.title}</h3>\n          <p className=\"text-gray-400 mb-2\">{commitment.description}</p>\n          <div className=\"flex gap-4 items-center flex-wrap\">\n            <span>Progress: {commitment.current_progress}%</span>\n            <span className={`px-2 py-1 rounded text-xs ${\n              commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n              commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n              commitment.status === 'rewarded' ? 'bg-yellow-500/20 text-yellow-400' :\n              'bg-red-500/20 text-red-400'\n            }`}>\n              {commitment.status.toUpperCase()}\n            </span>\n            {commitment.status === 'active' && (\n              <button \n                onClick={() => onUpdateProgress(commitment.id, Math.min(commitment.current_progress + 10, 100))}\n                className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-3 py-1 rounded\"\n              >\n                Update +10%\n              </button>\n            )}\n            {commitment.current_progress >= commitment.target_value && commitment.status !== 'rewarded' && (\n              <button \n                onClick={() => onClaimReward(commitment.id)}\n                className=\"bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-500/50 text-yellow-400 px-3 py-1 rounded\"\n              >\n                Claim Reward\n              </button>\n            )}\n            {commitment.reward_claimed && (\n              <span className=\"text-yellow-400 text-sm\">\n                💰 Reward: {commitment.reward_amount?.toFixed(2)} ETH\n              </span>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentView, setCurrentView] = useState<'feed' | 'dashboard'>('feed');\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  useEffect(() => {\n    fetchAllData();\n    \n    // Set up interval for real-time updates every 30 seconds\n    const interval = setInterval(() => {\n      fetchAllData();\n    }, 30000); // 30 seconds\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const commitmentsResponse = await brain.get_all_commitments();\n        const commitmentsData = await commitmentsResponse.json();\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        setCommitments([]);\n      }\n\n      try {\n        const envResponse = await brain.get_environmental_data();\n        const envData = await envResponse.json();\n        setEnvironmentalData(envData);\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        // Fallback data with proper type\n        setEnvironmentalData({\n          location: \"Sample Location\",\n          pm25: Math.random() * 50 + 10,\n          co2: Math.random() * 50 + 400,\n          forest_cover: Math.random() * 30 + 60,\n          water_quality: Math.random() * 40 + 60,\n          timestamp: new Date().toISOString(),\n          source: \"Mock Data\"\n        });\n      }\n\n      try {\n        // Fixed: pass object with commitmentId property\n        const satResponse = await brain.get_satellite_data({ commitmentId: 'general' });\n        const satData = await satResponse.json();\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        // Fallback data with proper type\n        setSatelliteData({\n          location: \"Sample Region\",\n          forest_cover_percentage: Math.random() * 20 + 70,\n          change_detected: Math.random() > 0.5,\n          last_updated: new Date().toISOString(),\n          confidence_score: Math.random() * 20 + 80\n        });\n      }\n\n      // Update timestamp to show data freshness\n      setLastUpdated(new Date());\n\n    } catch (err) {\n      setError('Failed to fetch data. Using demo mode.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      // First create in database (not just state)\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const response = await brain.create_commitment(commitmentData);\n      \n      if (response.ok) {\n        // After creating, refresh from database instead of just updating state\n        await fetchAllData(); // This will get persisted data\n        \n        // Reset form\n        setNewCommitment({\n          title: '',\n          description: '',\n          category: 'forest_protection',\n          target_value: '',\n          deadline: '',\n          official_name: '',\n          official_role: '',\n          stake_amount: ''\n        });\n\n        toast.success('Commitment created successfully!');\n      } else {\n        throw new Error('Failed to create commitment');\n      }\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      toast.error(`Error creating commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  const handleUpdateProgress = async (commitmentId: string, newProgress: number) => {\n    try {\n      const response = await brain.update_commitment_progress({\n        commitment_id: commitmentId,\n        new_progress: newProgress\n      });\n\n      if (response.ok) {\n        // Update local state\n        setCommitments(prev => prev.map(c =>\n          c.id === commitmentId\n            ? { \n                ...c, \n                current_progress: newProgress,\n                status: newProgress >= c.target_value ? 'completed' : 'active'\n              }\n            : c\n        ));\n\n        toast.success('Progress updated successfully!');\n        \n        // Refresh data to ensure consistency\n        await fetchAllData();\n      } else {\n        throw new Error('Failed to update progress');\n      }\n    } catch (err) {\n      toast.error('Error updating progress. Please try again.');\n      console.error('Error updating progress:', err);\n    }\n  };\n\n  const handleClaimReward = async (commitmentId: string) => {\n    try {\n      const response = await brain.claim_reward({ commitment_id: commitmentId });\n      \n      if (response.ok) {\n        const result = await response.json();\n        \n        // Update commitment status to 'rewarded'\n        setCommitments(prev => \n          prev.map(c => \n            c.id === commitmentId \n              ? { \n                  ...c, \n                  status: 'rewarded',\n                  reward_claimed: true,\n                  reward_amount: result.reward_amount,\n                  completion_date: new Date().toISOString()\n                }\n              : c\n          )\n        );\n        \n        // Show success message with details\n        alert(`🎉 ${result.message}\\nReward: ${result.reward_amount?.toFixed(2)} ETH\\nTransaction: ${result.transaction_hash}`);\n        \n        // Refresh data to ensure consistency\n        await fetchAllData();\n      } else {\n        throw new Error('Failed to claim reward');\n      }\n    } catch (err) {\n      alert('Error claiming reward. Please try again.');\n      console.error('Error claiming reward:', err);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': '🌳',\n      'air_quality': '🏭',\n      'water_management': '💧',\n      'biodiversity': '🦋',\n      'waste_reduction': '♻️'\n    };\n    return icons[category] || '🌍';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white p-6\">\n      {/* Header *\n      <div className=\"max-w-7xl mx-auto mb-8\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 mb-4\">\n              🌍 EcoChain Governance\n            </h1>\n            <p className=\"text-xl text-gray-300 mb-6\">\n              Transparent environmental accountability through blockchain technology\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-gray-400\">Last Updated</div>\n            <div className=\"text-cyan-400 font-medium\">{formatTime(lastUpdated)}</div>\n            <div className=\"text-xs text-gray-500\">{lastUpdated.toLocaleDateString()}</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation *\n      <div className=\"max-w-7xl mx-auto flex items-center space-x-4 mb-8\">\n        <button\n          onClick={() => setCurrentView('feed')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'feed'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          📡 Social Feed\n        </button>\n        <button\n          onClick={() => setCurrentView('dashboard')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'dashboard'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          📊 Dashboard\n        </button>\n      </div>\n\n      {currentView === 'dashboard' ? (\n        <CommitmentDashboard\n          commitments={commitments}\n          onUpdateProgress={handleUpdateProgress}\n          onClaimReward={handleClaimReward}\n        />\n      ) : (\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Environmental Data Cards *\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {environmentalData && (\n              <>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-red-500/20 p-6\">\n                  <div className=\"text-red-400 text-sm font-medium mb-2\">Air Quality (PM2.5)</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.pm25?.toFixed(1) || '25.0'} μg/m³</div>\n                  <div className=\"text-xs text-gray-400\">{environmentalData.location || 'Global'}</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-orange-500/20 p-6\">\n                  <div className=\"text-orange-400 text-sm font-medium mb-2\">CO2 Levels</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.co2?.toFixed(1) || '420.0'} ppm</div>\n                  <div className=\"text-xs text-gray-400\">Atmospheric Reading</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-green-500/20 p-6\">\n                  <div className=\"text-green-400 text-sm font-medium mb-2\">Forest Cover</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.forest_cover?.toFixed(1) || '75.0'}%</div>\n                  <div className=\"text-xs text-gray-400\">Regional Coverage</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6\">\n                  <div className=\"text-blue-400 text-sm font-medium mb-2\">Water Quality</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.water_quality?.toFixed(1) || '80.0'}%</div>\n                  <div className=\"text-xs text-gray-400\">Quality Index</div>\n                </div>\n              </>\n            )}\n          </div>\n\n          {/* Satellite Data *\n          {satelliteData && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6 mb-8\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mr-3\">\n                  🛰️\n                </div>\n                <div>\n                  <h3 className=\"text-white font-semibold\">Satellite Monitoring</h3>\n                  <p className=\"text-gray-400 text-sm\">Real-time environmental verification</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Location</div>\n                  <div className=\"text-white font-medium\">{satelliteData.location}</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Forest Coverage</div>\n                  <div className=\"text-white font-medium\">{satelliteData.forest_cover_percentage?.toFixed(1) || '75.0'}%</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Change Detected</div>\n                  <div className={`font-medium ${satelliteData.change_detected ? 'text-yellow-400' : 'text-green-400'}`}>\n                    {satelliteData.change_detected ? '⚠️ Yes' : '✅ No'}\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Confidence Score</div>\n                  <div className=\"text-white font-medium\">{satelliteData.confidence_score?.toFixed(1) || '95.0'}%</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Commitment Creation Form *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center mr-3\">\n                ➕\n              </span>\n              Create New Commitment\n            </h2>\n            <form onSubmit={handleCreateCommitment} className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Title</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.title}\n                  onChange={(e) => setNewCommitment({...newCommitment, title: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Commitment title\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Category</label>\n                <select \n                  value={newCommitment.category}\n                  onChange={(e) => setNewCommitment({...newCommitment, category: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                >\n                  <option value=\"forest_protection\">🌳 Forest Protection</option>\n                  <option value=\"air_quality\">🏭 Air Quality</option>\n                  <option value=\"water_management\">💧 Water Management</option>\n                  <option value=\"biodiversity\">🦋 Biodiversity</option>\n                  <option value=\"waste_reduction\">♻️ Waste Reduction</option>\n                </select>\n              </div>\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Description</label>\n                <textarea\n                  value={newCommitment.description}\n                  onChange={(e) => setNewCommitment({...newCommitment, description: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Describe your environmental commitment\"\n                  rows={3}\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Target Value (%)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.target_value}\n                  onChange={(e) => setNewCommitment({...newCommitment, target_value: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Target percentage\"\n                  min=\"0\"\n                  max=\"100\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Deadline</label>\n                <input\n                  type=\"date\"\n                  value={newCommitment.deadline}\n                  onChange={(e) => setNewCommitment({...newCommitment, deadline: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Name</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_name}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_name: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your name\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Role</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_role}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_role: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your role/position\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Stake Amount (ETH)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.stake_amount}\n                  onChange={(e) => setNewCommitment({...newCommitment, stake_amount: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Stake amount\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  required\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <button\n                  type=\"submit\"\n                  className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl\"\n                >\n                  Create Commitment\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {/* Commitments Feed *\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-white flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-400 rounded-lg flex items-center justify-center mr-3\">\n                📋\n              </span>\n              Recent Commitments\n            </h2>\n            {commitments.map((commitment) => (\n              <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center mr-4\">\n                      {getCategoryIcon(commitment.category)}\n                    </div>\n                    <div>\n                      <h3 className=\"text-white font-semibold\">{commitment.official_name}</h3>\n                      <p className=\"text-gray-400 text-sm\">{commitment.official_role}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <div className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                      commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                      commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n                      commitment.status === 'rewarded' ? 'bg-yellow-500/20 text-yellow-400' :\n                      'bg-red-500/20 text-red-400'\n                    }`}>\n                      {commitment.status.toUpperCase()}\n                    </div>\n                    {commitment.reward_claimed && (\n                      <div className=\"px-3 py-1 rounded-full text-sm font-semibold bg-yellow-500/20 text-yellow-400\">\n                        💰 {commitment.reward_amount?.toFixed(2)} ETH\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <h4 className=\"text-white font-semibold text-lg mb-2\">{commitment.title}</h4>\n                <p className=\"text-gray-300 mb-4\">{commitment.description}</p>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Progress</div>\n                    <div className=\"text-white font-medium\">{commitment.current_progress}% / {commitment.target_value}%</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Deadline</div>\n                    <div className=\"text-white font-medium\">{formatDate(commitment.deadline)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Stake</div>\n                    <div className=\"text-white font-medium\">{commitment.stake_amount} ETH</div>\n                  </div>\n                </div>\n                <div className=\"w-full bg-gray-800 rounded-full h-3 mb-4\">\n                  <div \n                    className=\"bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000\" \n                    style={{width: `${calculateProgress(commitment.current_progress, commitment.target_value)}%`}}\n                  ></div>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"text-xs text-gray-400\">\n                    Created: {formatDate(commitment.created_at)} • \n                    {commitment.satellite_verified ? ' 🛰️ Satellite Verified' : ' 📊 Self-reported'}\n                    {commitment.completion_date && ` • Completed: ${formatDate(commitment.completion_date)}`}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {commitments.length === 0 && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n              <div className=\"text-6xl mb-4\">🌱</div>\n              <h3 className=\"text-white text-xl mb-2\">No commitments yet</h3>\n              <p className=\"text-gray-400\">Be the first to create an environmental commitment!</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n  */\n\n\n\n\n\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { toast } from 'sonner';\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n  reward_claimed?: boolean;\n  reward_amount?: number;\n  // Blockchain and Token properties\n  token_reward?: number;\n  token_balance?: number;\n  transaction_hash?: string;\n  oracle_verified?: boolean;\n  oracle_data?: any;\n  completion_date?: string;\n  last_oracle_check?: string;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  creator: string;  // Official's name\n  metric_type: string;  // What metric to measure (PM2.5, CO2, etc.)\n}\n\n// Real API client (replace with your actual API endpoints)\nconst apiClient = {\n  baseUrl: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',\n  \n  async request(endpoint: string, options: RequestInit = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status} ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n\n  // Real API methods\n  async getAllCommitments(): Promise<{ commitments: Commitment[] }> {\n    return this.request('/api/commitments');\n  },\n\n  async getEnvironmentalData(): Promise<EnvironmentalData> {\n    return this.request('/api/environmental-data');\n  },\n\n  async getSatelliteData(commitmentId: string): Promise<SatelliteData> {\n    return this.request(`/api/satellite-data?commitmentId=${commitmentId}`);\n  },\n\n  async createCommitment(data: CreateCommitmentRequest): Promise<Commitment> {\n    return this.request('/api/commitments', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  },\n\n  async updateCommitmentProgress(commitmentId: string, newProgress: number): Promise<{ success: boolean }> {\n    return this.request(`/api/commitments/${commitmentId}/progress`, {\n      method: 'PUT',\n      body: JSON.stringify({ new_progress: newProgress }),\n    });\n  },\n\n  async claimReward(commitmentId: string): Promise<{ \n    success: boolean; \n    message: string; \n    reward_amount: number; \n    transaction_hash: string; \n  }> {\n    return this.request(`/api/commitments/${commitmentId}/claim-reward`, {\n      method: 'POST',\n    });\n  },\n\n  // Real environmental data sources\n  async getAirQualityData(location: string): Promise<{ pm25: number; co2: number }> {\n    // Use our backend API instead of external API\n    try {\n      const data = await this.request('/api/environmental-data');\n      return {\n        pm25: data.pm25 || 25,\n        co2: data.co2 || 420,\n      };\n    } catch (error) {\n      console.warn('Using fallback air quality data:', error);\n      return {\n        pm25: 25,\n        co2: 420,\n      };\n    }\n  },\n\n  async getForestCoverData(coordinates: { lat: number; lon: number }): Promise<{ forest_cover: number }> {\n    // Use our backend API\n    try {\n      const response = await fetch(`${this.baseUrl}/api/forest-cover?lat=${coordinates.lat}&lon=${coordinates.lon}`);\n      const data = await response.json();\n      return { forest_cover: data.forest_cover_percentage };\n    } catch (error) {\n      console.warn('Using fallback forest cover data:', error);\n      return { forest_cover: 75 }; // Fallback value\n    }\n  },\n\n  async getWaterQualityData(region: string): Promise<{ water_quality: number }> {\n    // Use our backend API\n    try {\n      const response = await fetch(`${this.baseUrl}/api/water-quality?region=${region}`);\n      const data = await response.json();\n      return { water_quality: data.quality_index };\n    } catch (error) {\n      console.warn('Using fallback water quality data:', error);\n      return { water_quality: 80 }; // Fallback value\n    }\n  }\n};\n\n// Blockchain integration for rewards\nconst blockchainClient = {\n  async connectWallet(): Promise<string | null> {\n    if (typeof window !== 'undefined' && window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        return accounts[0];\n      } catch (error) {\n        console.warn('Failed to connect wallet:', error);\n        return null;\n      }\n    } else {\n      console.warn('MetaMask not detected. Please install MetaMask to connect your wallet.');\n      return null;\n    }\n  },\n\n  async claimReward(commitmentId: string, amount: number): Promise<string> {\n    // Real CivicXChain Smart Contract interaction for token rewards\n    if (typeof window !== 'undefined' && window.ethereum) {\n      try {\n        // CivicXChain Smart Contract Address (deploy this contract)\n        const CONTRACT_ADDRESS = '0x742d35Cc6634C0532925a3b8D4C9db96C4b5Da5A'; // Example\n\n        // Encode function call for claiming environmental token reward\n        const functionSignature = '0x8f4ffcb1'; // claimEnvironmentalReward function selector\n        const encodedCommitmentId = commitmentId.toString().padStart(64, '0');\n        const encodedData = functionSignature + encodedCommitmentId;\n\n        const transactionHash = await window.ethereum.request({\n          method: 'eth_sendTransaction',\n          params: [{\n            to: CONTRACT_ADDRESS,\n            data: encodedData,\n            value: '0x0',\n            gas: '0x5208', // 21,000 gas for token transfer\n          }],\n        });\n\n        console.log('🪙 Environmental Token Reward Transaction:', transactionHash);\n        return transactionHash;\n      } catch (error) {\n        console.error('Blockchain transaction failed:', error);\n        throw new Error('Failed to claim token reward on Ethereum blockchain');\n      }\n    }\n    throw new Error('MetaMask required - Please install MetaMask to claim token rewards');\n  },\n\n  // Get user's CIVIC token balance\n  async getTokenBalance(userAddress: string): Promise<number> {\n    if (typeof window !== 'undefined' && window.ethereum) {\n      try {\n        const CONTRACT_ADDRESS = '0x742d35Cc6634C0532925a3b8D4C9db96C4b5Da5A';\n\n        // ERC-20 balanceOf function call\n        const balanceCall = await window.ethereum.request({\n          method: 'eth_call',\n          params: [{\n            to: CONTRACT_ADDRESS,\n            data: '0x70a08231' + userAddress.slice(2).padStart(64, '0'), // balanceOf(address)\n          }, 'latest'],\n        });\n\n        // Parse balance (assuming 18 decimals)\n        const balance = parseInt(balanceCall, 16) / Math.pow(10, 18);\n        return balance;\n      } catch (error) {\n        console.error('Failed to get token balance:', error);\n        return 0;\n      }\n    }\n    return 0;\n  },\n\n  // Add CIVIC token to MetaMask wallet\n  async addTokenToWallet(): Promise<boolean> {\n    if (typeof window !== 'undefined' && window.ethereum) {\n      try {\n        const CONTRACT_ADDRESS = '0x742d35Cc6634C0532925a3b8D4C9db96C4b5Da5A';\n\n        const wasAdded = await window.ethereum.request({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: CONTRACT_ADDRESS,\n              symbol: 'CIVIC',\n              decimals: 18,\n              image: 'https://api.civicxchain.org/token-logo.png',\n            },\n          },\n        });\n\n        return wasAdded;\n      } catch (error) {\n        console.error('Failed to add token to wallet:', error);\n        return false;\n      }\n    }\n    return false;\n  },\n\n  // Check fulfillment via Chainlink Oracle\n  async checkFulfillmentStatus(commitmentId: string): Promise<{\n    fulfilled: boolean;\n    currentValue: number;\n    targetValue: number;\n    oracleData: any;\n  }> {\n    if (typeof window !== 'undefined' && window.ethereum) {\n      try {\n        const ORACLE_CONTRACT = '0x8A753747A1Fa494EC906cE90E9f37563A8AF630e'; // Chainlink Oracle\n\n        // Call Chainlink oracle for real environmental data verification\n        const oracleCall = await window.ethereum.request({\n          method: 'eth_call',\n          params: [{\n            to: ORACLE_CONTRACT,\n            data: '0x50d25bcd' + commitmentId.toString().padStart(64, '0'), // getEnvironmentalData\n          }, 'latest'],\n        });\n\n        // Parse oracle response (real PM2.5, forest cover, etc.)\n        const fulfilled = parseInt(oracleCall.slice(2, 66), 16) > 0;\n        const currentValue = parseInt(oracleCall.slice(66, 130), 16) / 100;\n        const targetValue = parseInt(oracleCall.slice(130, 194), 16) / 100;\n\n        return {\n          fulfilled,\n          currentValue,\n          targetValue,\n          oracleData: {\n            timestamp: Date.now(),\n            source: 'Chainlink Environmental Oracle',\n            verified: true\n          }\n        };\n      } catch (error) {\n        console.error('Oracle verification failed:', error);\n        throw new Error('Failed to verify fulfillment via Chainlink Oracle');\n      }\n    }\n    throw new Error('Blockchain connection required for oracle verification');\n  }\n};\n\n// Real CommitmentDashboard component\nconst CommitmentDashboard = ({\n  commitments,\n  onUpdateProgress,\n  onClaimReward,\n  onCheckFulfillment\n}: {\n  commitments: Commitment[];\n  onUpdateProgress: (id: string, progress: number) => void;\n  onClaimReward: (id: string) => void;\n  onCheckFulfillment: (id: string) => void;\n}) => {\n  const [selectedCommitment, setSelectedCommitment] = useState<string | null>(null);\n  const [progressInput, setProgressInput] = useState<number>(0);\n\n  return (\n    <div className=\"text-white space-y-6\">\n      <h2 className=\"text-3xl font-bold mb-6 bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n        📊 Commitment Dashboard\n      </h2>\n      \n      <div className=\"grid gap-6\">\n        {commitments.map(commitment => (\n          <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 hover:border-cyan-500/40 transition-all duration-300\">\n            <div className=\"flex justify-between items-start mb-4\">\n              <div>\n                <h3 className=\"text-xl font-semibold text-white mb-2\">{commitment.title}</h3>\n                <p className=\"text-gray-400 mb-2\">{commitment.description}</p>\n                <div className=\"text-sm text-gray-500\">\n                  By {commitment.official_name} ({commitment.official_role})\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className={`px-3 py-1 rounded-full text-sm font-semibold mb-2 ${\n                  commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                  commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n                  commitment.status === 'rewarded' ? 'bg-yellow-500/20 text-yellow-400' :\n                  'bg-red-500/20 text-red-400'\n                }`}>\n                  {commitment.status.toUpperCase()}\n                </div>\n                {commitment.satellite_verified && (\n                  <div className=\"text-xs text-purple-400\">🛰️ Satellite Verified</div>\n                )}\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"mb-4\">\n              <div className=\"flex justify-between text-sm mb-2\">\n                <span className=\"text-gray-400\">Progress</span>\n                <span className=\"text-white\">{commitment.current_progress}% / {commitment.target_value}%</span>\n              </div>\n              <div className=\"w-full bg-gray-800 rounded-full h-3\">\n                <div \n                  className=\"bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000\"\n                  style={{width: `${Math.min((commitment.current_progress / commitment.target_value) * 100, 100)}%`}}\n                ></div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-4 items-center flex-wrap\">\n              {commitment.status === 'active' && (\n                <div className=\"flex gap-2 items-center\">\n                  <input\n                    type=\"number\"\n                    min={commitment.current_progress}\n                    max={100}\n                    value={selectedCommitment === commitment.id ? progressInput : commitment.current_progress}\n                    onChange={(e) => {\n                      setSelectedCommitment(commitment.id);\n                      setProgressInput(Number(e.target.value));\n                    }}\n                    className=\"w-20 bg-black/50 border border-cyan-500/30 rounded px-2 py-1 text-white text-sm\"\n                  />\n                  <button \n                    onClick={() => {\n                      onUpdateProgress(commitment.id, progressInput);\n                      setSelectedCommitment(null);\n                    }}\n                    className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-3 py-1 rounded text-sm transition-all duration-200\"\n                  >\n                    Update Progress\n                  </button>\n                </div>\n              )}\n              \n              {/* Check Fulfillment Button - Always available for active commitments */}\n              {commitment.status === 'active' && (\n                <button\n                  onClick={() => onCheckFulfillment(commitment.id)}\n                  className=\"bg-blue-500/20 hover:bg-blue-500/30 border border-blue-500/50 text-blue-400 px-4 py-2 rounded font-medium transition-all duration-200 hover:scale-105\"\n                >\n                  🔍 Check Fulfillment via Oracle\n                </button>\n              )}\n\n              {/* Claim Reward Button - Only when target is reached */}\n              {commitment.current_progress >= commitment.target_value &&\n               commitment.status !== 'rewarded' &&\n               !commitment.reward_claimed && (\n                <button\n                  onClick={() => onClaimReward(commitment.id)}\n                  className=\"bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-500/50 text-yellow-400 px-4 py-2 rounded font-medium transition-all duration-200 hover:scale-105\"\n                >\n                  🪙 Claim Token Reward\n                </button>\n              )}\n              \n              {commitment.reward_claimed && (\n                <div className=\"flex items-center gap-2 text-yellow-400\">\n                  <span className=\"text-2xl\">💰</span>\n                  <span className=\"font-medium\">\n                    Reward: {commitment.reward_amount?.toFixed(4)} ETH\n                  </span>\n                </div>\n              )}\n            </div>\n\n            {/* Details */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4 pt-4 border-t border-gray-700\">\n              <div>\n                <div className=\"text-xs text-gray-400\">Deadline</div>\n                <div className=\"text-sm text-white\">{new Date(commitment.deadline).toLocaleDateString()}</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-400\">Stake</div>\n                <div className=\"text-sm text-white\">{commitment.stake_amount} ETH</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-400\">Category</div>\n                <div className=\"text-sm text-white\">{commitment.category.replace('_', ' ')}</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-400\">Created</div>\n                <div className=\"text-sm text-white\">{new Date(commitment.created_at).toLocaleDateString()}</div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {commitments.length === 0 && (\n        <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n          <div className=\"text-6xl mb-4\">📊</div>\n          <h3 className=\"text-white text-xl mb-2\">No commitments to manage</h3>\n          <p className=\"text-gray-400\">Create your first environmental commitment to get started!</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentView, setCurrentView] = useState<'feed' | 'dashboard'>('feed');\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [walletAddress, setWalletAddress] = useState<string | null>(null);\n\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  useEffect(() => {\n    fetchAllData();\n    connectWallet();\n    \n    // Set up interval for real-time updates every 30 seconds\n    const interval = setInterval(() => {\n      fetchAllData();\n    }, 30000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const connectWallet = async () => {\n    const address = await blockchainClient.connectWallet();\n    setWalletAddress(address);\n  };\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch commitments\n      try {\n        const commitmentsData = await apiClient.getAllCommitments();\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        toast.error('Failed to load commitments');\n      }\n\n      // Fetch environmental data from our backend\n      try {\n        const envData = await apiClient.request('/api/environmental-data');\n        setEnvironmentalData({\n          location: envData.location || \"Global\",\n          pm25: envData.pm25 || 25,\n          co2: envData.co2 || 420,\n          forest_cover: envData.forest_cover || 75,\n          water_quality: envData.water_quality || 80,\n          timestamp: envData.timestamp || new Date().toISOString(),\n          source: \"Backend API\"\n        });\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        // Set fallback data to prevent undefined errors\n        setEnvironmentalData({\n          location: \"Global\",\n          pm25: 25,\n          co2: 420,\n          forest_cover: 75,\n          water_quality: 80,\n          timestamp: new Date().toISOString(),\n          source: \"Fallback Data\"\n        });\n        toast.error('Failed to load environmental data, using fallback values');\n      }\n\n      // Fetch real satellite data\n      try {\n        const satData = await apiClient.getSatelliteData('general');\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        // Set fallback satellite data\n        setSatelliteData({\n          location: 'Global Environmental Monitoring',\n          forest_cover_percentage: 75.0,\n          change_detected: false,\n          confidence_score: 95.0,\n          last_updated: new Date().toISOString()\n        });\n        toast.error('Failed to load satellite data, using fallback values');\n      }\n\n      setLastUpdated(new Date());\n\n    } catch (err) {\n      setError('Failed to fetch data. Please check your connection.');\n      console.error('Error fetching data:', err);\n      toast.error('Failed to load data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Determine metric type based on category\n      const getMetricType = (category: string) => {\n        switch (category) {\n          case 'air_quality': return 'μg/m³'; // PM2.5 measurement\n          case 'forest_protection': return 'percentage'; // Forest cover percentage\n          case 'water_management': return 'quality_index'; // Water quality index\n          case 'biodiversity': return 'species_count'; // Number of species\n          case 'waste_reduction': return 'tons'; // Waste reduction in tons\n          default: return 'units';\n        }\n      };\n\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        creator: `${newCommitment.official_name} (${newCommitment.official_role})`,  // Include role in creator\n        metric_type: getMetricType(newCommitment.category)  // Proper metric type based on category\n      };\n\n      const newCommitmentResponse = await apiClient.createCommitment(commitmentData);\n      \n      // Add to local state immediately for better UX\n      setCommitments(prev => [newCommitmentResponse, ...prev]);\n      \n      // Reset form\n      setNewCommitment({\n        title: '',\n        description: '',\n        category: 'forest_protection',\n        target_value: '',\n        deadline: '',\n        official_name: '',\n        official_role: '',\n        stake_amount: ''\n      });\n\n      toast.success('Commitment created successfully! 🎉');\n      \n      // Refresh data to ensure consistency\n      await fetchAllData();\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      toast.error(`Failed to create commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleUpdateProgress = async (commitmentId: string, newProgress: number) => {\n    try {\n      await apiClient.updateCommitmentProgress(commitmentId, newProgress);\n\n      // Update local state\n      setCommitments(prev => prev.map(c =>\n        c.id === commitmentId\n          ? { \n              ...c, \n              current_progress: newProgress,\n              status: newProgress >= c.target_value ? 'completed' : 'active'\n            }\n          : c\n      ));\n\n      toast.success('Progress updated successfully! 📈');\n      \n      // Refresh data to ensure consistency\n      await fetchAllData();\n\n    } catch (err) {\n      toast.error('Failed to update progress. Please try again.');\n      console.error('Error updating progress:', err);\n    }\n  };\n\n  const handleClaimReward = async (commitmentId: string) => {\n    try {\n      if (!walletAddress) {\n        toast.error('Please connect your wallet first');\n        await connectWallet();\n        return;\n      }\n\n      // Step 1: Verify fulfillment via Chainlink Oracle\n      toast.info('🔍 Verifying environmental achievement via Chainlink Oracle...');\n      const fulfillmentStatus = await blockchainClient.checkFulfillmentStatus(commitmentId);\n\n      if (!fulfillmentStatus.fulfilled) {\n        toast.error(`❌ Environmental target not yet achieved!\\nCurrent: ${fulfillmentStatus.currentValue}\\nTarget: ${fulfillmentStatus.targetValue}\\nOracle: ${fulfillmentStatus.oracleData.source}`);\n        return;\n      }\n\n      toast.success('✅ Environmental achievement verified by Chainlink Oracle!');\n\n      // Step 2: Process reward claim\n      const result = await apiClient.claimReward(commitmentId);\n\n      // Step 3: Calculate token reward\n      const commitment = commitments.find(c => c.id === commitmentId);\n      const stakeAmount = commitment?.stake_amount || 0.1; // Default 0.1 ETH\n      const tokenReward = calculateTokenReward(stakeAmount, commitment?.category || 'environmental');\n\n      // Step 4: Claim token reward on Ethereum blockchain\n      toast.info('🪙 Claiming CIVIC token reward on Ethereum...');\n      const transactionHash = await blockchainClient.claimReward(commitmentId, result.reward_amount);\n\n      // Step 5: Update commitment status\n      setCommitments(prev =>\n        prev.map(c =>\n          c.id === commitmentId\n            ? {\n                ...c,\n                status: 'rewarded',\n                reward_claimed: true,\n                reward_amount: result.reward_amount,\n                completion_date: new Date().toISOString(),\n                transaction_hash: transactionHash,\n                token_reward: tokenReward,\n                oracle_verified: true,\n                oracle_data: fulfillmentStatus.oracleData\n              }\n            : c\n        )\n      );\n\n      toast.success(`🎉 Environmental Achievement Tokens Claimed!\\n💰 ETH Reward: ${result.reward_amount.toFixed(4)} ETH\\n🪙 CIVIC Tokens: ${tokenReward.toFixed(0)} CIVIC\\n🔗 TX: ${transactionHash.slice(0, 10)}...`);\n      \n      // Refresh data\n      await fetchAllData();\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      toast.error(`Failed to claim reward: ${errorMessage}`);\n      console.error('Error claiming reward:', err);\n    }\n  };\n\n  // Check fulfillment status via Chainlink Oracle\n  const handleCheckFulfillment = async (commitmentId: string) => {\n    try {\n      if (!walletAddress) {\n        toast.error('Please connect your wallet first');\n        return;\n      }\n\n      toast.info('🔍 Checking environmental progress via Chainlink Oracle...');\n      const status = await blockchainClient.checkFulfillmentStatus(commitmentId);\n\n      if (status.fulfilled) {\n        toast.success(`✅ Environmental target achieved!\\nCurrent: ${status.currentValue}\\nTarget: ${status.targetValue}\\nVerified by: ${status.oracleData.source}\\n🎉 Ready to claim NFT reward!`);\n      } else {\n        const progress = ((status.currentValue / status.targetValue) * 100).toFixed(1);\n        toast.warning(`⏳ Environmental progress: ${progress}%\\nCurrent: ${status.currentValue}\\nTarget: ${status.targetValue}\\nVerified by: ${status.oracleData.source}`);\n      }\n\n      // Update commitment with oracle data\n      setCommitments(prev =>\n        prev.map(c =>\n          c.id === commitmentId\n            ? {\n                ...c,\n                actual_value: status.currentValue,\n                oracle_verified: true,\n                oracle_data: status.oracleData,\n                last_oracle_check: new Date().toISOString()\n              }\n            : c\n        )\n      );\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Oracle verification failed';\n      toast.error(`Failed to check fulfillment: ${errorMessage}`);\n      console.error('Error checking fulfillment:', err);\n    }\n  };\n\n  // Add CIVIC token to MetaMask wallet\n  const addTokenToWallet = async () => {\n    try {\n      if (!walletAddress) {\n        toast.error('Please connect your wallet first');\n        return;\n      }\n\n      // Add CIVIC token to MetaMask using the blockchain client\n      const wasAdded = await blockchainClient.addTokenToWallet();\n\n      if (wasAdded) {\n        toast.success('🎉 CIVIC token added to MetaMask! Check your wallet\\'s token list.');\n      } else {\n        toast.warning('Token addition was cancelled');\n      }\n    } catch (error) {\n      console.error('Error adding token to wallet:', error);\n      toast.error('Failed to add token to wallet. Make sure you have MetaMask installed.');\n    }\n  };\n\n  // Calculate token reward based on stake and category\n  const calculateTokenReward = (stakeAmount: number, category: string): number => {\n    const TOKENS_PER_ETH = 1000; // 1 ETH = 1000 CIVIC tokens\n    const baseTokens = stakeAmount * TOKENS_PER_ETH;\n\n    // Difficulty multipliers for different environmental metrics\n    let multiplier = 1.0; // Base multiplier\n\n    switch (category) {\n      case 'air_quality':\n        multiplier = 1.5; // 1.5x for air quality (harder to achieve)\n        break;\n      case 'forest_protection':\n        multiplier = 1.3; // 1.3x for forest protection\n        break;\n      case 'water_management':\n        multiplier = 1.1; // 1.1x for water quality\n        break;\n      case 'biodiversity':\n        multiplier = 1.4; // 1.4x for biodiversity\n        break;\n      case 'waste_reduction':\n        multiplier = 1.2; // 1.2x for waste reduction\n        break;\n      default:\n        multiplier = 1.0;\n    }\n\n    return Math.floor(baseTokens * multiplier);\n  };\n\n  // Helper functions\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': '🌳',\n      'air_quality': '🏭',\n      'water_management': '💧',\n      'biodiversity': '🦋',\n      'waste_reduction': '♻️'\n    };\n    return icons[category] || '🌍';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain Platform...</p>\n          <p className=\"text-gray-400 text-sm mt-2\">Connecting to blockchain, smart contracts, and environmental monitoring APIs...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-6xl mb-4\">⚠️</div>\n          <h2 className=\"text-white text-2xl mb-4\">Connection Error</h2>\n          <p className=\"text-gray-400 mb-6\">{error}</p>\n          <button \n            onClick={fetchAllData}\n            className=\"bg-cyan-500 hover:bg-cyan-600 text-white px-6 py-3 rounded-lg transition-colors\"\n          >\n            Retry Connection\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white p-6\">\n      {/* Header */}\n      <div className=\"max-w-7xl mx-auto mb-8\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 mb-4\">\n              🏛️ CivicXChain: Official Environmental Accountability\n            </h1>\n            <p className=\"text-xl text-gray-300 mb-6\">\n              Binding public officials to environmental commitments through blockchain smart contracts,\n              Chainlink oracles, and satellite monitoring. Rewards for achievement, penalties for failure.\n            </p>\n            {walletAddress && (\n              <div className=\"text-sm text-cyan-400\">\n                🔗 Wallet: {walletAddress.slice(0, 6)}...{walletAddress.slice(-4)}\n              </div>\n            )}\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-gray-400\">Last Updated</div>\n            <div className=\"text-cyan-400 font-medium\">{formatTime(lastUpdated)}</div>\n            <div className=\"text-xs text-gray-500\">{lastUpdated.toLocaleDateString()}</div>\n            <button \n              onClick={fetchAllData}\n              className=\"mt-2 text-xs bg-cyan-500/20 hover:bg-cyan-500/30 px-3 py-1 rounded border border-cyan-500/50 transition-colors\"\n            >\n              🔄 Refresh\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"max-w-7xl mx-auto flex items-center space-x-4 mb-8\">\n        <button\n          onClick={() => setCurrentView('feed')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'feed'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          📡 Social Feed\n        </button>\n        <button\n          onClick={() => setCurrentView('dashboard')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'dashboard'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          📊 Dashboard\n        </button>\n      </div>\n\n      {currentView === 'dashboard' ? (\n        <div className=\"max-w-7xl mx-auto\">\n          <CommitmentDashboard\n            commitments={commitments}\n            onUpdateProgress={handleUpdateProgress}\n            onClaimReward={handleClaimReward}\n            onCheckFulfillment={handleCheckFulfillment}\n          />\n\n          {/* Token Rewards Gallery */}\n          <div className=\"mt-12\">\n            <h2 className=\"text-3xl font-bold mb-6 bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent\">\n              🪙 Environmental Achievement Token Rewards\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {/* Demo Token Reward for testing */}\n              {commitments.filter(c => c.reward_claimed && c.token_reward).length === 0 && (\n                <div className=\"bg-gradient-to-br from-yellow-500/10 to-orange-500/10 backdrop-blur-xl rounded-xl border border-yellow-500/20 p-6 hover:border-yellow-500/40 transition-all duration-300\">\n                  <div className=\"text-center\">\n                    <div className=\"w-24 h-24 bg-gradient-to-br from-yellow-400 to-orange-400 rounded-full flex items-center justify-center mx-auto mb-4 text-4xl\">\n                      🪙\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-white mb-2\">Demo Environmental Achievement Tokens</h3>\n                    <p className=\"text-yellow-400 font-mono text-sm mb-2\">1,500 CIVIC</p>\n                    <p className=\"text-gray-300 text-sm mb-3\">Complete a commitment to earn your first tokens!</p>\n                    <div className=\"space-y-2 text-xs\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">ETH Reward:</span>\n                        <span className=\"text-yellow-400\">0.1500 ETH</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Token Reward:</span>\n                        <span className=\"text-yellow-400\">1,500 CIVIC</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Status:</span>\n                        <span className=\"text-orange-400\">Demo Only</span>\n                      </div>\n                      <div className=\"flex justify-center mt-2\">\n                        <span className=\"bg-orange-500/20 text-orange-400 px-2 py-1 rounded text-xs\">\n                          🎯 Complete Commitment to Earn\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {commitments\n                .filter(c => c.reward_claimed && c.token_reward)\n                .map(commitment => (\n                  <div key={commitment.id} className=\"bg-gradient-to-br from-yellow-500/10 to-orange-500/10 backdrop-blur-xl rounded-xl border border-yellow-500/20 p-6 hover:border-yellow-500/40 transition-all duration-300\">\n                    <div className=\"text-center\">\n                      <div className=\"w-24 h-24 bg-gradient-to-br from-yellow-400 to-orange-400 rounded-full flex items-center justify-center mx-auto mb-4 text-4xl\">\n                        🪙\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-white mb-2\">Environmental Achievement Tokens</h3>\n                      <p className=\"text-yellow-400 font-mono text-sm mb-2\">{commitment.token_reward?.toLocaleString() || '0'} CIVIC</p>\n                      <p className=\"text-gray-300 text-sm mb-3\">{commitment.title}</p>\n                      <div className=\"space-y-2 text-xs\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-400\">ETH Reward:</span>\n                          <span className=\"text-yellow-400\">{commitment.reward_amount?.toFixed(4)} ETH</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-400\">Token Reward:</span>\n                          <span className=\"text-yellow-400\">{commitment.token_reward?.toLocaleString() || '0'} CIVIC</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-400\">Completed:</span>\n                          <span className=\"text-green-400\">{new Date(commitment.completion_date || '').toLocaleDateString()}</span>\n                        </div>\n                        {commitment.transaction_hash && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-400\">TX:</span>\n                            <span className=\"text-blue-400 font-mono\">{commitment.transaction_hash.slice(0, 10)}...</span>\n                          </div>\n                        )}\n                        {commitment.oracle_verified && (\n                          <div className=\"flex justify-center mt-2\">\n                            <span className=\"bg-green-500/20 text-green-400 px-2 py-1 rounded text-xs\">\n                              ✅ Oracle Verified\n                            </span>\n                          </div>\n                        )}\n\n                        {/* Add Token to Wallet Button */}\n                        <div className=\"mt-3 pt-2 border-t border-gray-700\">\n                          <button\n                            onClick={() => addTokenToWallet()}\n                            className=\"w-full bg-purple-500/20 hover:bg-purple-500/30 border border-purple-500/50 text-purple-400 px-3 py-2 rounded text-xs font-medium transition-all duration-200 hover:scale-105\"\n                          >\n                            📱 Add CIVIC Token to Wallet\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n\n              {commitments.filter(c => c.reward_claimed && c.token_reward).length === 0 && (\n                <div className=\"col-span-full text-center py-12\">\n                  <div className=\"text-6xl mb-4\">🎯</div>\n                  <h3 className=\"text-white text-xl mb-2\">No Token Rewards Yet</h3>\n                  <p className=\"text-gray-400\">Complete environmental commitments to earn CIVIC token rewards!</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* How to View Tokens in Wallet Guide */}\n          <div className=\"mt-12\">\n            <h2 className=\"text-3xl font-bold mb-6 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              📱 How to View Your CIVIC Tokens in Wallet\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n\n              {/* MetaMask Guide */}\n              <div className=\"bg-gradient-to-br from-orange-500/10 to-yellow-500/10 backdrop-blur-xl rounded-xl border border-orange-500/20 p-6\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-orange-400 to-yellow-400 rounded-full flex items-center justify-center mx-auto mb-3 text-2xl\">\n                    🦊\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-white\">MetaMask</h3>\n                </div>\n                <div className=\"space-y-3 text-sm text-gray-300\">\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"text-orange-400 font-bold\">1.</span>\n                    <span>Open MetaMask extension</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"text-orange-400 font-bold\">2.</span>\n                    <span>Click \"Assets\" tab</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"text-orange-400 font-bold\">3.</span>\n                    <span>Click \"Import tokens\"</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"text-orange-400 font-bold\">4.</span>\n                    <span>Enter CIVIC token contract address</span>\n                  </div>\n                  <div className=\"mt-4 p-3 bg-black/30 rounded border border-orange-500/30\">\n                    <p className=\"text-xs text-orange-300 font-mono\">\n                      Contract: 0x742d35...Da5A<br/>\n                      Network: Ethereum Mainnet\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* OpenSea Guide */}\n              <div className=\"bg-gradient-to-br from-blue-500/10 to-cyan-500/10 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-blue-400 to-cyan-400 rounded-full flex items-center justify-center mx-auto mb-3 text-2xl\">\n                    🌊\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-white\">OpenSea</h3>\n                </div>\n                <div className=\"space-y-3 text-sm text-gray-300\">\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"text-blue-400 font-bold\">1.</span>\n                    <span>Go to opensea.io</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"text-blue-400 font-bold\">2.</span>\n                    <span>Connect your wallet</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"text-blue-400 font-bold\">3.</span>\n                    <span>Click \"Profile\" → \"Collected\"</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"text-blue-400 font-bold\">4.</span>\n                    <span>View your CIVIC token balance</span>\n                  </div>\n                  <div className=\"mt-4\">\n                    <a\n                      href=\"https://opensea.io\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"inline-block bg-blue-500/20 hover:bg-blue-500/30 border border-blue-500/50 text-blue-400 px-3 py-2 rounded text-xs font-medium transition-all duration-200\"\n                    >\n                      🔗 Visit OpenSea\n                    </a>\n                  </div>\n                </div>\n              </div>\n\n              {/* Contract Info */}\n              <div className=\"bg-gradient-to-br from-purple-500/10 to-pink-500/10 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full flex items-center justify-center mx-auto mb-3 text-2xl\">\n                    📋\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-white\">Token Info</h3>\n                </div>\n                <div className=\"space-y-3 text-sm text-gray-300\">\n                  <div>\n                    <span className=\"text-purple-400 font-semibold\">Token Name:</span>\n                    <p className=\"text-xs mt-1\">CivicXChain Environmental Token</p>\n                  </div>\n                  <div>\n                    <span className=\"text-purple-400 font-semibold\">Symbol:</span>\n                    <p className=\"text-xs mt-1\">CIVIC</p>\n                  </div>\n                  <div>\n                    <span className=\"text-purple-400 font-semibold\">Network:</span>\n                    <p className=\"text-xs mt-1\">Ethereum Mainnet</p>\n                  </div>\n                  <div>\n                    <span className=\"text-purple-400 font-semibold\">Standard:</span>\n                    <p className=\"text-xs mt-1\">ERC-20 (Token)</p>\n                  </div>\n                  <div>\n                    <span className=\"text-purple-400 font-semibold\">Decimals:</span>\n                    <p className=\"text-xs mt-1\">18</p>\n                  </div>\n                  <div className=\"mt-4 p-3 bg-black/30 rounded border border-purple-500/30\">\n                    <p className=\"text-xs text-purple-300 font-mono break-all\">\n                      0x742d35Cc6634C0532925a3b8D4C9db96C4b5Da5A\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Environmental Data Cards */}\n          {environmentalData && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-red-500/20 p-6 hover:border-red-500/40 transition-all duration-300\">\n                <div className=\"text-red-400 text-sm font-medium mb-2\">Air Quality (PM2.5)</div>\n                <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.pm25?.toFixed(1) || '25.0'} μg/m³</div>\n                <div className=\"text-xs text-gray-400\">{environmentalData.location || 'Global'}</div>\n                <div className=\"text-xs text-gray-500 mt-1\">Source: {environmentalData.source || 'Environmental API'}</div>\n              </div>\n              <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-orange-500/20 p-6 hover:border-orange-500/40 transition-all duration-300\">\n                <div className=\"text-orange-400 text-sm font-medium mb-2\">CO2 Levels</div>\n                <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.co2?.toFixed(1) || '420.0'} ppm</div>\n                <div className=\"text-xs text-gray-400\">Atmospheric Reading</div>\n                <div className=\"text-xs text-gray-500 mt-1\">Real-time monitoring</div>\n              </div>\n              <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-green-500/20 p-6 hover:border-green-500/40 transition-all duration-300\">\n                <div className=\"text-green-400 text-sm font-medium mb-2\">Forest Cover</div>\n                <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.forest_cover?.toFixed(1) || '75.0'}%</div>\n                <div className=\"text-xs text-gray-400\">Regional Coverage</div>\n                <div className=\"text-xs text-gray-500 mt-1\">Satellite verified</div>\n              </div>\n              <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300\">\n                <div className=\"text-blue-400 text-sm font-medium mb-2\">Water Quality</div>\n                <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.water_quality?.toFixed(1) || '80.0'}%</div>\n                <div className=\"text-xs text-gray-400\">Quality Index</div>\n                <div className=\"text-xs text-gray-500 mt-1\">WHO standards</div>\n              </div>\n            </div>\n          )}\n\n          {/* Satellite Data */}\n          {satelliteData && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6 mb-8 hover:border-purple-500/40 transition-all duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mr-3\">\n                  🛰️\n                </div>\n                <div>\n                  <h3 className=\"text-white font-semibold\">Satellite Monitoring</h3>\n                  <p className=\"text-gray-400 text-sm\">Real-time environmental verification</p>\n                </div>\n                <div className=\"ml-auto text-xs text-gray-400\">\n                  Updated: {new Date(satelliteData.last_updated).toLocaleString()}\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Location</div>\n                  <div className=\"text-white font-medium\">{satelliteData.location}</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Forest Coverage</div>\n                  <div className=\"text-white font-medium\">{satelliteData.forest_cover_percentage?.toFixed(1) || '75.0'}%</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Change Detected</div>\n                  <div className={`font-medium ${satelliteData.change_detected ? 'text-yellow-400' : 'text-green-400'}`}>\n                    {satelliteData.change_detected ? '⚠️ Changes detected' : '✅ Stable'}\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Confidence Score</div>\n                  <div className=\"text-white font-medium\">{satelliteData.confidence_score?.toFixed(1) || '95.0'}%</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Commitment Creation Form */}\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-4 flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center mr-3\">\n                🏛️\n              </span>\n              Bind Public Official to Environmental Commitment\n            </h2>\n            <p className=\"text-gray-300 mb-6 text-sm\">\n              Create blockchain-verified environmental commitments for public officials.\n              Achievements are monitored via Chainlink oracles and satellite data.\n              Officials receive NFT rewards for fulfillment or face penalties for non-compliance.\n            </p>\n            <form onSubmit={handleCreateCommitment} className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Public Official Name *</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_name}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_name: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"e.g., Mayor John Smith\"\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Role/Position *</label>\n                <select\n                  value={newCommitment.official_role}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_role: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white focus:border-cyan-400 focus:outline-none transition-colors\"\n                  disabled={isSubmitting}\n                >\n                  <option value=\"mayor\">🏛️ Mayor</option>\n                  <option value=\"governor\">🏛️ Governor</option>\n                  <option value=\"environment_minister\">🌍 Environment Minister</option>\n                  <option value=\"city_council\">🏢 City Council Member</option>\n                  <option value=\"environmental_agency\">🌱 Environmental Agency Head</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Environmental Commitment Title *</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.title}\n                  onChange={(e) => setNewCommitment({...newCommitment, title: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"e.g., Reduce PM2.5 levels below 20 μg/m³\"\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Environmental Category *</label>\n                <select\n                  value={newCommitment.category}\n                  onChange={(e) => setNewCommitment({...newCommitment, category: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white focus:border-cyan-400 focus:outline-none transition-colors\"\n                  disabled={isSubmitting}\n                >\n                  <option value=\"air_quality\">🏭 Air Quality (PM2.5, CO2, etc.)</option>\n                  <option value=\"forest_protection\">🌳 Forest Protection & Reforestation</option>\n                  <option value=\"water_management\">💧 Water Quality & Management</option>\n                  <option value=\"biodiversity\">🦋 Biodiversity Conservation</option>\n                  <option value=\"waste_reduction\">♻️ Waste Reduction & Recycling</option>\n                </select>\n              </div>\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Detailed Description *</label>\n                <textarea\n                  value={newCommitment.description}\n                  onChange={(e) => setNewCommitment({...newCommitment, description: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"Describe your environmental commitment, methodology, and expected impact...\"\n                  rows={4}\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Target Environmental Value *</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.target_value}\n                  onChange={(e) => setNewCommitment({...newCommitment, target_value: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"e.g., 20 (for PM2.5 < 20 μg/m³)\"\n                  min=\"0\"\n                  step=\"0.1\"\n                  required\n                  disabled={isSubmitting}\n                />\n                <p className=\"text-xs text-gray-400 mt-1\">\n                  Examples: PM2.5 &lt; 20 μg/m³, CO2 &lt; 400 ppm, Forest cover &gt; 75%\n                </p>\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Completion Deadline *</label>\n                <input\n                  type=\"date\"\n                  value={newCommitment.deadline}\n                  onChange={(e) => setNewCommitment({...newCommitment, deadline: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white focus:border-cyan-400 focus:outline-none transition-colors\"\n                  min={new Date().toISOString().split('T')[0]}\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Name *</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_name}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_name: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"Your full name\"\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Role/Position *</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_role}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_role: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"e.g., Environmental Minister, Mayor, etc.\"\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Stake Amount (ETH) *</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.stake_amount}\n                  onChange={(e) => setNewCommitment({...newCommitment, stake_amount: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"Amount to stake (e.g., 1.5)\"\n                  min=\"0.01\"\n                  step=\"0.01\"\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 disabled:from-gray-500 disabled:to-gray-600 text-white font-semibold py-4 px-8 rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:transform-none disabled:cursor-not-allowed\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <span className=\"animate-spin inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\"></span>\n                      Creating Commitment...\n                    </>\n                  ) : (\n                    <>🚀 Create Smart Environmental Commitment</>\n                  )}\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {/* Commitments Feed */}\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-white flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-400 rounded-lg flex items-center justify-center mr-3\">\n                📋\n              </span>\n              Environmental Commitments Feed\n              <span className=\"ml-2 text-sm bg-cyan-500/20 text-cyan-400 px-2 py-1 rounded\">\n                {commitments.length} Active\n              </span>\n            </h2>\n            \n            {commitments.map((commitment) => (\n              <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300 hover:transform hover:scale-[1.02]\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center mr-4\">\n                      {getCategoryIcon(commitment.category)}\n                    </div>\n                    <div>\n                      <h3 className=\"text-white font-semibold\">{commitment.official_name}</h3>\n                      <p className=\"text-gray-400 text-sm\">{commitment.official_role}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2 items-center\">\n                    <div className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                      commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                      commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n                      commitment.status === 'rewarded' ? 'bg-yellow-500/20 text-yellow-400' :\n                      'bg-red-500/20 text-red-400'\n                    }`}>\n                      {commitment.status.toUpperCase()}\n                    </div>\n                    {commitment.satellite_verified && (\n                      <div className=\"px-2 py-1 rounded-full text-xs bg-purple-500/20 text-purple-400\">\n                        🛰️ Verified\n                      </div>\n                    )}\n                    {commitment.reward_claimed && (\n                      <div className=\"px-3 py-1 rounded-full text-sm font-semibold bg-yellow-500/20 text-yellow-400\">\n                        💰 {commitment.reward_amount?.toFixed(4)} ETH\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <h4 className=\"text-white font-semibold text-lg mb-2\">{commitment.title}</h4>\n                <p className=\"text-gray-300 mb-4\">{commitment.description}</p>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Progress</div>\n                    <div className=\"text-white font-medium\">\n                      {commitment.current_progress}% / {commitment.target_value}%\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Deadline</div>\n                    <div className=\"text-white font-medium\">{formatDate(commitment.deadline)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Stake</div>\n                    <div className=\"text-white font-medium\">{commitment.stake_amount} ETH</div>\n                  </div>\n                </div>\n                \n                <div className=\"w-full bg-gray-800 rounded-full h-3 mb-4\">\n                  <div \n                    className=\"bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000\" \n                    style={{width: `${calculateProgress(commitment.current_progress, commitment.target_value)}%`}}\n                  ></div>\n                </div>\n                \n                <div className=\"flex justify-between items-center text-xs text-gray-400\">\n                  <div>\n                    Created: {formatDate(commitment.created_at)}\n                    {commitment.completion_date && ` • Completed: ${formatDate(commitment.completion_date)}`}\n                  </div>\n                  <div className=\"text-right\">\n                    Category: {commitment.category.replace('_', ' ')}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {commitments.length === 0 && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n              <div className=\"text-6xl mb-4\">🌱</div>\n              <h3 className=\"text-white text-xl mb-2\">No environmental commitments yet</h3>\n              <p className=\"text-gray-400 mb-6\">Be the first to create a verified environmental commitment and help build a sustainable future!</p>\n              <button \n                onClick={() => setCurrentView('feed')}\n                className=\"bg-cyan-500 hover:bg-cyan-600 text-white px-6 py-3 rounded-lg transition-colors\"\n              >\n                Create Your First Commitment\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n"],"names":[],"mappings":"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","debugId":null}}]
}