{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/kimberleycheung/CiviXchain/civicxchain-platform/frontend/lib/api-client.ts"],"sourcesContent":["// lib/api-client.ts\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || '/api';\n\nexport interface ApiError {\n  error: string;\n  details?: string;\n}\n\nexport class ApiClient {\n  private static async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    const config: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      console.log('Making API request to:', url);\n      \n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('API response:', data);\n      \n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  static async getAirQualityData(location: string): Promise<any> {\n    const params = new URLSearchParams({\n      location,\n    });\n    \n    return this.request(`/air-quality?${params}`);\n  }\n\n  static async getSatelliteData(): Promise<any> {\n    return this.request('/satellite-data');\n  }\n\n  static async getAllCommitments(): Promise<any> {\n    return this.request('/commitments');\n  }\n}\n\n// Export individual functions for backward compatibility\nexport const getAirQualityData = ApiClient.getAirQualityData.bind(ApiClient);\nexport const getSatelliteData = ApiClient.getSatelliteData.bind(ApiClient);\nexport const getAllCommitments = ApiClient.getAllCommitments.bind(ApiClient);"],"names":[],"mappings":"AAAA,oBAAoB;;;;;;;AACC;AAArB,MAAM,eAAe,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,wBAAwB,IAAI;AAOtD,MAAM;IACX,aAAqB,QAAW,QAAgB,EAAE,UAAuB,CAAC,CAAC,EAAc;QACvF,MAAM,MAAM,GAAG,eAAe,UAAU;QAExC,MAAM,SAAsB;YAC1B,SAAS;gBACP,gBAAgB;gBAChB,GAAG,QAAQ,OAAO;YACpB;YACA,GAAG,OAAO;QACZ;QAEA,IAAI;YACF,QAAQ,GAAG,CAAC,0BAA0B;YAEtC,MAAM,WAAW,MAAM,MAAM,KAAK;YAElC,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI;gBACrC,MAAM,IAAI,MAAM,UAAU,KAAK,IAAI,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;YAC7E;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,iBAAiB;YAE7B,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,uBAAuB;YACrC,MAAM;QACR;IACF;IAEA,aAAa,kBAAkB,QAAgB,EAAgB;QAC7D,MAAM,SAAS,IAAI,gBAAgB;YACjC;QACF;QAEA,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,QAAQ;IAC9C;IAEA,aAAa,mBAAiC;QAC5C,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB;IAEA,aAAa,oBAAkC;QAC7C,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB;AACF;AAGO,MAAM,oBAAoB,UAAU,iBAAiB,CAAC,IAAI,CAAC;AAC3D,MAAM,mBAAmB,UAAU,gBAAgB,CAAC,IAAI,CAAC;AACzD,MAAM,oBAAoB,UAAU,iBAAiB,CAAC,IAAI,CAAC","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/kimberleycheung/CiviXchain/civicxchain-platform/frontend/app/page.tsx"],"sourcesContent":["/*'use client';\n\nimport { useState, useEffect } from 'react';\n\nexport default function Home() {\n  const [posts, setPosts] = useState([]);\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900\">\n      {/* Cyberpunk Navigation *\n      <nav className=\"bg-black/40 backdrop-blur-xl border-b border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-black font-bold text-sm\">C</span>\n                </div>\n                <h1 className=\"text-2xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                  CivicXChain\n                </h1>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"bg-cyan-500/20 hover:bg-cyan-500/30 border border-cyan-500/50 text-cyan-400 px-4 py-2 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/25\">\n                Connect Wallet\n              </button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section *\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-transparent to-purple-500/10\"></div>\n        <div className=\"max-w-7xl mx-auto px-4 py-12\">\n          <div className=\"text-center\">\n            <h2 className=\"text-5xl font-bold text-white mb-4\">\n              The Future of \n              <span className=\"bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\"> Civic Accountability</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-8 max-w-3xl mx-auto\">\n              Where government officials and citizens unite through blockchain-verified environmental commitments. \n              Track progress, earn rewards, and build a sustainable future together.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Feed *\n      <div className=\"max-w-4xl mx-auto px-4 pb-12\">\n        {/* Create Commitment Section *\n        <div className=\"bg-black/30 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8 shadow-2xl\">\n          <h3 className=\"text-xl text-white mb-4 flex items-center\">\n            <span className=\"w-2 h-2 bg-cyan-400 rounded-full mr-3 animate-pulse\"></span>\n            What's your environmental commitment?\n          </h3>\n          <div className=\"space-y-4\">\n            <textarea \n              className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg p-4 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400 transition-all\"\n              placeholder=\"I commit to reducing my city's carbon emissions by 25% within 12 months...\"\n              rows={3}\n            />\n            <div className=\"flex flex-wrap gap-3\">\n              <select className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\">\n                <option>üå≥ Forest Protection</option>\n                <option>üè≠ Air Quality</option>\n                <option>üíß Water Management</option>\n                <option>ü¶ã Biodiversity</option>\n                <option>‚ôªÔ∏è Waste Reduction</option>\n              </select>\n              <input \n                type=\"number\" \n                placeholder=\"Target %\" \n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white w-24 focus:border-cyan-400\"\n              />\n              <input \n                type=\"date\" \n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n              />\n            </div>\n            <button className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-cyan-500/25\">\n              üöÄ Create Smart Commitment\n            </button>\n          </div>\n        </div>\n\n        {/* Sample Posts *\n        <div className=\"space-y-6\">\n          {/* Government Official Post *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300 shadow-xl\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mr-4\">\n                <span className=\"text-white font-bold text-lg\">üèõÔ∏è</span>\n              </div>\n              <div>\n                <h3 className=\"text-white font-semibold flex items-center\">\n                  Mayor Sarah Johnson\n                  <span className=\"ml-2 bg-blue-500/20 text-blue-400 text-xs px-2 py-1 rounded-full border border-blue-500/30\">\n                    VERIFIED OFFICIAL\n                  </span>\n                </h3>\n                <p className=\"text-gray-400 text-sm\">Government Official ‚Ä¢ 2 hours ago</p>\n              </div>\n            </div>\n            \n            <p className=\"text-white mb-4 leading-relaxed\">\n              üéØ <strong>MAJOR COMMITMENT:</strong> Reducing our city's air pollution by 30% over the next 6 months! \n              New electric bus fleet rolling out next week. Real satellite data will track our progress. \n              <span className=\"text-cyan-400\">#CleanAirInitiative #CivicXChain</span>\n            </p>\n            \n            {/* Progress Bar *\n            <div className=\"bg-gradient-to-r from-green-500/20 to-cyan-500/20 rounded-lg p-4 mb-4 border border-green-500/20\">\n              <div className=\"flex justify-between text-sm text-green-400 mb-2\">\n                <span>üõ∞Ô∏è Satellite Verified Progress</span>\n                <span className=\"font-mono\">15% / 30%</span>\n              </div>\n              <div className=\"w-full bg-gray-800 rounded-full h-3 overflow-hidden\">\n                <div \n                  className=\"bg-gradient-to-r from-green-400 to-cyan-400 h-3 rounded-full transition-all duration-1000 shadow-lg shadow-green-400/30\" \n                  style={{width: '50%'}}\n                ></div>\n              </div>\n              <p className=\"text-xs text-gray-400 mt-2\">‚è±Ô∏è 4 months remaining ‚Ä¢ üí∞ 50 ETH staked</p>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex space-x-6\">\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-green-400 transition-colors\">\n                  <span>üëç</span>\n                  <span className=\"text-sm\">89 supports</span>\n                </button>\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-blue-400 transition-colors\">\n                  <span>üí¨</span>\n                  <span className=\"text-sm\">23 comments</span>\n                </button>\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-purple-400 transition-colors\">\n                  <span>üì§</span>\n                  <span className=\"text-sm\">Share</span>\n                </button>\n              </div>\n              <button className=\"bg-green-500/20 hover:bg-green-500/30 text-green-400 px-4 py-2 rounded-lg text-sm border border-green-500/30 transition-all\">\n                üëÄ Monitor Progress\n              </button>\n            </div>\n          </div>\n\n          {/* Citizen Post *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6 hover:border-purple-500/40 transition-all duration-300 shadow-xl\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mr-4\">\n                <span className=\"text-white font-bold text-lg\">üå±</span>\n              </div>\n              <div>\n                <h3 className=\"text-white font-semibold flex items-center\">\n                  Alex Chen\n                  <span className=\"ml-2 bg-purple-500/20 text-purple-400 text-xs px-2 py-1 rounded-full border border-purple-500/30\">\n                    ECO CITIZEN\n                  </span>\n                </h3>\n                <p className=\"text-gray-400 text-sm\">Environmental Activist ‚Ä¢ 5 hours ago</p>\n              </div>\n            </div>\n            \n            <p className=\"text-white mb-4 leading-relaxed\">\n              üå≥ Just completed my personal commitment to plant 100 trees in my neighborhood! \n              Here's the proof from satellite imagery. Earned my first NFT badge! üèÜ\n              <span className=\"text-purple-400\">#TreePlanting #CivicXChain #PersonalCommitment</span>\n            </p>\n            \n            {/* Achievement Badge *\n            <div className=\"bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-lg p-4 mb-4 border border-purple-500/20\">\n              <div className=\"flex items-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-purple-400 to-pink-400 rounded-lg flex items-center justify-center mr-4\">\n                  <span className=\"text-2xl\">üèÜ</span>\n                </div>\n                <div>\n                  <h4 className=\"text-purple-400 font-semibold\">Forest Guardian Badge</h4>\n                  <p className=\"text-gray-400 text-sm\">NFT #1337 ‚Ä¢ Blockchain Verified</p>\n                  <p className=\"text-xs text-gray-500\">Achievement unlocked for planting 100+ trees</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex space-x-6\">\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-purple-400 transition-colors\">\n                  <span>üëè</span>\n                  <span className=\"text-sm\">156 applause</span>\n                </button>\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-blue-400 transition-colors\">\n                  <span>üí¨</span>\n                  <span className=\"text-sm\">34 comments</span>\n                </button>\n                <button className=\"flex items-center space-x-2 text-gray-400 hover:text-cyan-400 transition-colors\">\n                  <span>üîÑ</span>\n                  <span className=\"text-sm\">Repost</span>\n                </button>\n              </div>\n              <button className=\"bg-purple-500/20 hover:bg-purple-500/30 text-purple-400 px-4 py-2 rounded-lg text-sm border border-purple-500/30 transition-all\">\n                üéâ Congratulate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n  */\n\n/*'use client';\n\nimport { useState, useEffect } from 'react';\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Form state for creating new commitments\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  const API_BASE_URL = process.env.NODE_ENV === 'development' \n    ? 'http://localhost:8000' \n    : 'https://your-production-api-url.com';\n\n  // Fetch all data on component mount\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch commitments\n      const commitmentsResponse = await fetch(`${API_BASE_URL}/commitments`);\n      if (commitmentsResponse.ok) {\n        const commitmentsData = await commitmentsResponse.json();\n        setCommitments(commitmentsData);\n      }\n\n      // Fetch environmental data\n      const envResponse = await fetch(`${API_BASE_URL}/environmental-data`);\n      if (envResponse.ok) {\n        const envData = await envResponse.json();\n        setEnvironmentalData(envData);\n      }\n\n      // Fetch satellite data\n      const satResponse = await fetch(`${API_BASE_URL}/satellite-data`);\n      if (satResponse.ok) {\n        const satData = await satResponse.json();\n        setSatelliteData(satData);\n      }\n\n    } catch (err) {\n      setError('Failed to fetch data. Please check your connection.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/commitments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...newCommitment,\n          target_value: parseFloat(newCommitment.target_value),\n          stake_amount: parseFloat(newCommitment.stake_amount)\n        }),\n      });\n\n      if (response.ok) {\n        const createdCommitment = await response.json();\n        setCommitments(prev => [createdCommitment, ...prev]);\n        \n        // Reset form\n        setNewCommitment({\n          title: '',\n          description: '',\n          category: 'forest_protection',\n          target_value: '',\n          deadline: '',\n          official_name: '',\n          official_role: '',\n          stake_amount: ''\n        });\n        \n        alert('Commitment created successfully!');\n      } else {\n        throw new Error('Failed to create commitment');\n      }\n    } catch (err) {\n      alert('Error creating commitment. Please try again.');\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': 'üå≥',\n      'air_quality': 'üè≠',\n      'water_management': 'üíß',\n      'biodiversity': 'ü¶ã',\n      'waste_reduction': '‚ôªÔ∏è'\n    };\n    return icons[category] || 'üåç';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900\">\n      {/* Cyberpunk Navigation *\n      <nav className=\"bg-black/40 backdrop-blur-xl border-b border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-black font-bold text-sm\">C</span>\n                </div>\n                <h1 className=\"text-2xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                  CivicXChain\n                </h1>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button \n                onClick={fetchAllData}\n                className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-4 py-2 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-green-500/25\"\n              >\n                üîÑ Refresh Data\n              </button>\n              <button className=\"bg-cyan-500/20 hover:bg-cyan-500/30 border border-cyan-500/50 text-cyan-400 px-4 py-2 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/25\">\n                Connect Wallet\n              </button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Error Message *\n      {error && (\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"bg-red-500/20 border border-red-500/50 text-red-400 px-4 py-3 rounded-lg\">\n            ‚ö†Ô∏è {error}\n          </div>\n        </div>\n      )}\n\n      {/* Hero Section *\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-transparent to-purple-500/10\"></div>\n        <div className=\"max-w-7xl mx-auto px-4 py-12\">\n          <div className=\"text-center\">\n            <h2 className=\"text-5xl font-bold text-white mb-4\">\n              The Future of \n              <span className=\"bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\"> Civic Accountability</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-8 max-w-3xl mx-auto\">\n              Where government officials and citizens unite through blockchain-verified environmental commitments. \n              Track progress, earn rewards, and build a sustainable future together.\n            </p>\n            \n            {/* Real-time Environmental Data Display *\n            {environmentalData && (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto mt-8\">\n                <div className=\"bg-black/30 backdrop-blur-xl rounded-lg p-4 border border-cyan-500/20\">\n                  <div className=\"text-cyan-400 text-sm\">PM2.5 Level</div>\n                  <div className=\"text-2xl font-bold text-white\">{environmentalData.pm25} Œºg/m¬≥</div>\n                </div>\n                <div className=\"bg-black/30 backdrop-blur-xl rounded-lg p-4 border border-green-500/20\">\n                  <div className=\"text-green-400 text-sm\">Forest Cover</div>\n                  <div className=\"text-2xl font-bold text-white\">{environmentalData.forest_cover}%</div>\n                </div>\n                <div className=\"bg-black/30 backdrop-blur-xl rounded-lg p-4 border border-blue-500/20\">\n                  <div className=\"text-blue-400 text-sm\">Water Quality</div>\n                  <div className=\"text-2xl font-bold text-white\">{environmentalData.water_quality}/100</div>\n                </div>\n                <div className=\"bg-black/30 backdrop-blur-xl rounded-lg p-4 border border-purple-500/20\">\n                  <div className=\"text-purple-400 text-sm\">CO2 Level</div>\n                  <div className=\"text-2xl font-bold text-white\">{environmentalData.co2} ppm</div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Feed *\n      <div className=\"max-w-4xl mx-auto px-4 pb-12\">\n        {/* Create Commitment Section *\n        <div className=\"bg-black/30 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8 shadow-2xl\">\n          <h3 className=\"text-xl text-white mb-4 flex items-center\">\n            <span className=\"w-2 h-2 bg-cyan-400 rounded-full mr-3 animate-pulse\"></span>\n            Create Your Environmental Commitment\n          </h3>\n          \n          <form onSubmit={handleCreateCommitment} className=\"space-y-4\">\n            <input\n              type=\"text\"\n              placeholder=\"Commitment title...\"\n              value={newCommitment.title}\n              onChange={(e) => setNewCommitment(prev => ({ ...prev, title: e.target.value }))}\n              className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg p-4 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400 transition-all\"\n              required\n            />\n            \n            <textarea \n              placeholder=\"Detailed description of your commitment...\"\n              value={newCommitment.description}\n              onChange={(e) => setNewCommitment(prev => ({ ...prev, description: e.target.value }))}\n              className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg p-4 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400 transition-all\"\n              rows={3}\n              required\n            />\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <select \n                value={newCommitment.category}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, category: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n              >\n                <option value=\"forest_protection\">üå≥ Forest Protection</option>\n                <option value=\"air_quality\">üè≠ Air Quality</option>\n                <option value=\"water_management\">üíß Water Management</option>\n                <option value=\"biodiversity\">ü¶ã Biodiversity</option>\n                <option value=\"waste_reduction\">‚ôªÔ∏è Waste Reduction</option>\n              </select>\n              \n              <input \n                type=\"number\" \n                placeholder=\"Target %\" \n                value={newCommitment.target_value}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, target_value: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                required\n              />\n              \n              <input \n                type=\"date\" \n                value={newCommitment.deadline}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, deadline: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                required\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Official Name\"\n                value={newCommitment.official_name}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, official_name: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                required\n              />\n              \n              <input\n                type=\"text\"\n                placeholder=\"Official Role\"\n                value={newCommitment.official_role}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, official_role: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                required\n              />\n              \n              <input\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"Stake Amount (ETH)\"\n                value={newCommitment.stake_amount}\n                onChange={(e) => setNewCommitment(prev => ({ ...prev, stake_amount: e.target.value }))}\n                className=\"bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                required\n              />\n            </div>\n            \n            <button \n              type=\"submit\"\n              className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-cyan-500/25\"\n            >\n              üöÄ Create Smart Commitment\n            </button>\n          </form>\n        </div>\n\n        {/* Satellite Data Section *\n        {satelliteData && (\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-green-500/20 p-6 mb-8 shadow-xl\">\n            <h3 className=\"text-xl text-white mb-4 flex items-center\">\n              <span className=\"text-2xl mr-3\">üõ∞Ô∏è</span>\n              Live Satellite Monitoring\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <div className=\"text-green-400 text-sm\">Location</div>\n                <div className=\"text-white font-semibold\">{satelliteData.location}</div>\n              </div>\n              <div>\n                <div className=\"text-green-400 text-sm\">Forest Cover</div>\n                <div className=\"text-white font-semibold\">{satelliteData.forest_cover_percentage}%</div>\n              </div>\n              <div>\n                <div className=\"text-green-400 text-sm\">Confidence Score</div>\n                <div className=\"text-white font-semibold\">{satelliteData.confidence_score}%</div>\n              </div>\n            </div>\n            {satelliteData.change_detected && (\n              <div className=\"mt-4 bg-yellow-500/20 border border-yellow-500/50 text-yellow-400 px-4 py-2 rounded-lg\">\n                ‚ö†Ô∏è Environmental change detected! Last updated: {formatDate(satelliteData.last_updated)}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Commitments Feed *\n        <div className=\"space-y-6\">\n          {commitments.length === 0 ? (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n              <div className=\"text-6xl mb-4\">üå±</div>\n              <h3 className=\"text-white text-xl mb-2\">No commitments yet</h3>\n              <p className=\"text-gray-400\">Be the first to create an environmental commitment!</p>\n            </div>\n          ) : (\n            commitments.map((commitment) => (\n              <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300 shadow-xl\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mr-4\">\n                    <span className=\"text-white font-bold text-lg\">\n                      {getCategoryIcon(commitment.category)}\n                    </span>\n                  </div>\n                  <div>\n                    <h3 className=\"text-white font-semibold flex items-center\">\n                      {commitment.official_name}\n                      <span className=\"ml-2 bg-blue-500/20 text-blue-400 text-xs px-2 py-1 rounded-full border border-blue-500/30\">\n                        {commitment.official_role}\n                      </span>\n                    </h3>\n                    <p className=\"text-gray-400 text-sm\">\n                      {formatDate(commitment.created_at)} ‚Ä¢ {commitment.category.replace('_', ' ').toUpperCase()}\n                    </p>\n                  </div>\n                </div>\n                \n                <h4 className=\"text-white font-semibold text-lg mb-2\">{commitment.title}</h4>\n                <p className=\"text-white mb-4 leading-relaxed\">{commitment.description}</p>\n                \n                {/* Progress Bar *\n                <div className=\"bg-gradient-to-r from-green-500/20 to-cyan-500/20 rounded-lg p-4 mb-4 border border-green-500/20\">\n                  <div className=\"flex justify-between text-sm text-green-400 mb-2\">\n                    <span>\n                      {commitment.satellite_verified ? 'üõ∞Ô∏è Satellite Verified' : 'üìä Self Reported'} Progress\n                    </span>\n                    <span className=\"font-mono\">\n                      {commitment.current_progress}% / {commitment.target_value}%\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-800 rounded-full h-3 overflow-hidden\">\n                    <div \n                      className=\"bg-gradient-to-r from-green-400 to-cyan-400 h-3 rounded-full transition-all duration-1000 shadow-lg shadow-green-400/30\" \n                      style={{width: `${calculateProgress(commitment.current_progress, commitment.target_value)}%`}}\n                    ></div>\n                  </div>\n                  <p className=\"text-xs text-gray-400 mt-2\">\n                    ‚è±Ô∏è Deadline: {formatDate(commitment.deadline)} ‚Ä¢ üí∞ {commitment.stake_amount} ETH staked\n                  </p>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex space-x-6\">\n                    <button className=\"flex items-center space-x-2 text-gray-400 hover:text-green-400 transition-colors\">\n                      <span>üëç</span>\n                      <span className=\"text-sm\">Support</span>\n                    </button>\n                    <button className=\"flex items-center space-x-2 text-gray-400 hover:text-blue-400 transition-colors\">\n                      <span>üí¨</span>\n                      <span className=\"text-sm\">Comment</span>\n                    </button>\n                    <button className=\"flex items-center space-x-2 text-gray-400 hover:text-purple-400 transition-colors\">\n                      <span>üì§</span>\n                      <span className=\"text-sm\">Share</span>\n                    </button>\n                  </div>\n                  <span className={`px-3 py-1 rounded-full text-xs font-semibold ${\n                    commitment.status === 'active' ? 'bg-green-500/20 text-green-400 border border-green-500/30' :\n                    commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30' :\n                    'bg-red-500/20 text-red-400 border border-red-500/30'\n                  }`}>\n                    {commitment.status.toUpperCase()}\n                  </span>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}*/\n\n\n/*\n'use client';\n\nimport { useState, useEffect } from 'react';\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Form state for creating new commitments\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  // Proper API configuration\n  const API_BASE_URL = process.env.NODE_ENV === 'development' \n    ? 'https://api.databutton.com/_projects/f4d95df8-c90d-4815-9705-a83827aa1133/dbtn/devx/app/routes'\n    : 'https://api.databutton.com/_projects/f4d95df8-c90d-4815-9705-a83827aa1133/dbtn/prodx/app/routes';\n\n  // Helper function for API calls with proper error handling\n  const apiCall = async (endpoint: string, options: RequestInit = {}) => {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      credentials: 'include', // Important for authentication\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`API Error: ${response.status} - ${errorText}`);\n    }\n\n    return response.json();\n  };\n\n  // Fetch all data on component mount\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch commitments with error handling\n      try {\n        const commitmentsData = await apiCall('/get_all_commitments');\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        // Set mock data if API fails (for development)\n        setCommitments([]);\n      }\n\n      // Fetch environmental data with error handling\n      try {\n        const envData = await apiCall('/get_environmental_data');\n        setEnvironmentalData(envData);\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        // Set mock data if API fails\n        setEnvironmentalData({\n          location: \"Sample Location\",\n          pm25: 25.5,\n          co2: 410,\n          forest_cover: 75.2,\n          water_quality: 82,\n          timestamp: new Date().toISOString(),\n          source: \"Mock Data\"\n        });\n      }\n\n      // Fetch satellite data with error handling\n      try {\n        const satData = await apiCall('/get_satellite_data?commitmentId=general');\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        // Set mock data if API fails\n        setSatelliteData({\n          location: \"Sample Region\",\n          forest_cover_percentage: 78.5,\n          change_detected: false,\n          last_updated: new Date().toISOString(),\n          confidence_score: 94\n        });\n      }\n\n    } catch (err) {\n      setError('Failed to fetch data. Using demo mode.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const createdCommitment = await apiCall('/create_commitment', {\n        method: 'POST',\n        body: JSON.stringify(commitmentData),\n      });\n\n      setCommitments(prev => [createdCommitment, ...prev]);\n      \n      // Reset form\n      setNewCommitment({\n        title: '',\n        description: '',\n        category: 'forest_protection',\n        target_value: '',\n        deadline: '',\n        official_name: '',\n        official_role: '',\n        stake_amount: ''\n      });\n      \n      alert('Commitment created successfully!');\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      alert(`Error creating commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  // Rest of your component methods remain the same...\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': 'üå≥',\n      'air_quality': 'üè≠',\n      'water_management': 'üíß',\n      'biodiversity': 'ü¶ã',\n      'waste_reduction': '‚ôªÔ∏è'\n    };\n    return icons[category] || 'üåç';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  // Your existing JSX return statement stays exactly the same...\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    // Your existing JSX remains exactly the same - just copy it from your current file\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900\">\n      {/* Keep all your existing JSX exactly as it is *\n      {/* Just replace the part above this comment *\n    </div>\n  );\n}\n*/\n\n\n\n/*\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport CommitmentDashboard from './components/CommitmentDashboard';\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentView, setCurrentView] = useState<'feed' | 'dashboard'>('feed');\n\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  const API_BASE_URL = process.env.NODE_ENV === 'development'\n    ? 'https://api.databutton.com/_projects/f4d95df8-c90d-4815-9705-a83827aa1133/dbtn/devx/app/routes'\n    : 'https://api.databutton.com/_projects/f4d95df8-c90d-4815-9705-a83827aa1133/dbtn/prodx/app/routes';\n\n  const apiCall = async (endpoint: string, options: RequestInit = {}) => {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`API Error: ${response.status} - ${errorText}`);\n    }\n\n    return response.json();\n  };\n\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const commitmentsData = await apiCall('/get_all_commitments');\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        setCommitments([]);\n      }\n\n      try {\n        const envData = await apiCall('/get_environmental_data');\n        setEnvironmentalData(envData);\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        setEnvironmentalData({\n          location: \"Sample Location\",\n          pm25: 25.5,\n          co2: 410,\n          forest_cover: 75.2,\n          water_quality: 82,\n          timestamp: new Date().toISOString(),\n          source: \"Mock Data\"\n        });\n      }\n\n      try {\n        const satData = await apiCall('/get_satellite_data?commitmentId=general');\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        setSatelliteData({\n          location: \"Sample Region\",\n          forest_cover_percentage: 78.5,\n          change_detected: false,\n          last_updated: new Date().toISOString(),\n          confidence_score: 94\n        });\n      }\n\n    } catch (err) {\n      setError('Failed to fetch data. Using demo mode.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const createdCommitment = await apiCall('/create_commitment', {\n        method: 'POST',\n        body: JSON.stringify(commitmentData),\n      });\n\n      setCommitments(prev => [createdCommitment, ...prev]);\n\n      setNewCommitment({\n        title: '',\n        description: '',\n        category: 'forest_protection',\n        target_value: '',\n        deadline: '',\n        official_name: '',\n        official_role: '',\n        stake_amount: ''\n      });\n\n      alert('Commitment created successfully!');\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      alert(`Error creating commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  const handleUpdateProgress = async (commitmentId: string, newProgress: number) => {\n    try {\n      const response = await apiCall('/update_commitment_progress', {\n        method: 'POST',\n        body: JSON.stringify({\n          commitment_id: commitmentId,\n          new_progress: newProgress\n        }),\n      });\n\n      setCommitments(prev => prev.map(c =>\n        c.id === commitmentId\n          ? { ...c, current_progress: newProgress }\n          : c\n      ));\n\n      alert('Progress updated successfully!');\n    } catch (err) {\n      alert('Error updating progress. Please try again.');\n      console.error('Error updating progress:', err);\n    }\n  };\n\n  const handleClaimReward = async (commitmentId: string) => {\n    try {\n      const response = await apiCall('/claim_reward', {\n        method: 'POST',\n        body: JSON.stringify({ commitment_id: commitmentId }),\n      });\n\n      alert('Reward claimed successfully!');\n    } catch (err) {\n      alert('Error claiming reward. Please try again.');\n      console.error('Error claiming reward:', err);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': 'üå≥',\n      'air_quality': 'üè≠',\n      'water_management': 'üíß',\n      'biodiversity': 'ü¶ã',\n      'waste_reduction': '‚ôªÔ∏è'\n    };\n    return icons[category] || 'üåç';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white p-6\">\n      <div className=\"flex items-center space-x-4 mb-6\">\n        <button\n          onClick={() => setCurrentView('feed')}\n          className={`px-4 py-2 rounded-lg transition-all duration-300 ${\n            currentView === 'feed'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50'\n              : 'text-gray-400 hover:text-cyan-400'\n          }`}\n        >\n          Feed\n        </button>\n        <button\n          onClick={() => setCurrentView('dashboard')}\n          className={`px-4 py-2 rounded-lg transition-all duration-300 ${\n            currentView === 'dashboard'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50'\n              : 'text-gray-400 hover:text-cyan-400'\n          }`}\n        >\n          Dashboard\n        </button>\n      </div>\n\n      {currentView === 'dashboard' ? (\n        <CommitmentDashboard\n          commitments={commitments}\n          onUpdateProgress={handleUpdateProgress}\n          onClaimReward={handleClaimReward}\n        />\n      ) : (\n        <div>\n          {/* Your existing feed JSX goes here ‚Äî e.g., map commitments, display environmental data, etc. *\n          <p>üå± Feed content goes here (replace with your existing JSX)...</p>\n        </div>\n      )}\n    </div>\n  );\n}\n*/\n\n/*\n'use client';\n\nimport { useState, useEffect } from 'react';\n// For standalone project, you'll need to install and configure these:\n// npm install sonner\n// You'll also need to create your own API client or use fetch\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\n// Fixed brain client with proper return types\nconst brain = {\n  get_all_commitments: async () => ({ \n    json: async () => ({ \n      commitments: [] as Commitment[] \n    }) \n  }),\n  get_environmental_data: async () => ({ \n    json: async (): Promise<EnvironmentalData> => ({\n      location: \"Sample Location\",\n      pm25: 25.5,\n      co2: 410,\n      forest_cover: 75.2,\n      water_quality: 82,\n      timestamp: new Date().toISOString(),\n      source: \"Mock Data\"\n    }) \n  }),\n  get_satellite_data: async (params: { commitmentId: string }) => ({ \n    json: async (): Promise<SatelliteData> => ({\n      location: \"Sample Region\",\n      forest_cover_percentage: 78.5,\n      change_detected: false,\n      last_updated: new Date().toISOString(),\n      confidence_score: 94\n    }) \n  }),\n  create_commitment: async (data: CreateCommitmentRequest) => ({ \n    json: async (): Promise<Commitment> => ({\n      id: Date.now().toString(),\n      ...data,\n      current_progress: 0,\n      status: 'active',\n      created_at: new Date().toISOString(),\n      satellite_verified: false\n    }) \n  }),\n  update_commitment_progress: async (data: { commitment_id: string; new_progress: number }) => ({ \n    json: async () => ({ success: true, ...data }) \n  }),\n  claim_reward: async (data: { commitment_id: string }) => ({ \n    json: async () => ({ success: true, message: 'Reward claimed!', ...data }) \n  }),\n};\n\n// Simple toast implementation - install 'sonner' package: npm install sonner\n// import { toast } from 'sonner';\n// For now, using console.log as placeholder\nconst toast = {\n  success: (msg: string) => console.log('Success:', msg),\n  error: (msg: string) => console.error('Error:', msg),\n};\n\n// Placeholder CommitmentDashboard component - you'll need to create this\nconst CommitmentDashboard = ({ commitments, onUpdateProgress, onClaimReward }: {\n  commitments: Commitment[];\n  onUpdateProgress: (id: string, progress: number) => void;\n  onClaimReward: (id: string) => void;\n}) => (\n  <div className=\"text-white\">\n    <h2 className=\"text-2xl font-bold mb-4\">Commitment Dashboard</h2>\n    <div className=\"grid gap-4\">\n      {commitments.map(commitment => (\n        <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6\">\n          <h3 className=\"text-lg font-semibold\">{commitment.title}</h3>\n          <p className=\"text-gray-400 mb-2\">{commitment.description}</p>\n          <div className=\"flex gap-4 items-center\">\n            <span>Progress: {commitment.current_progress}%</span>\n            <button \n              onClick={() => onUpdateProgress(commitment.id, Math.min(commitment.current_progress + 10, 100))}\n              className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-3 py-1 rounded\"\n            >\n              Update +10%\n            </button>\n            {commitment.current_progress >= commitment.target_value && (\n              <button \n                onClick={() => onClaimReward(commitment.id)}\n                className=\"bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-500/50 text-yellow-400 px-3 py-1 rounded\"\n              >\n                Claim Reward\n              </button>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentView, setCurrentView] = useState<'feed' | 'dashboard'>('feed');\n\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const commitmentsResponse = await brain.get_all_commitments();\n        const commitmentsData = await commitmentsResponse.json();\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        setCommitments([]);\n      }\n\n      try {\n        const envResponse = await brain.get_environmental_data();\n        const envData = await envResponse.json();\n        setEnvironmentalData(envData);\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        // Fallback data with proper type\n        setEnvironmentalData({\n          location: \"Sample Location\",\n          pm25: 25.5,\n          co2: 410,\n          forest_cover: 75.2,\n          water_quality: 82,\n          timestamp: new Date().toISOString(),\n          source: \"Mock Data\"\n        });\n      }\n\n      try {\n        // Fixed: pass object with commitmentId property\n        const satResponse = await brain.get_satellite_data({ commitmentId: 'general' });\n        const satData = await satResponse.json();\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        // Fallback data with proper type\n        setSatelliteData({\n          location: \"Sample Region\",\n          forest_cover_percentage: 78.5,\n          change_detected: false,\n          last_updated: new Date().toISOString(),\n          confidence_score: 94\n        });\n      }\n\n    } catch (err) {\n      setError('Failed to fetch data. Using demo mode.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const response = await brain.create_commitment(commitmentData);\n      const createdCommitment = await response.json();\n\n      setCommitments(prev => [createdCommitment, ...prev]);\n\n      setNewCommitment({\n        title: '',\n        description: '',\n        category: 'forest_protection',\n        target_value: '',\n        deadline: '',\n        official_name: '',\n        official_role: '',\n        stake_amount: ''\n      });\n\n      toast.success('Commitment created successfully!');\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      toast.error(`Error creating commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  const handleUpdateProgress = async (commitmentId: string, newProgress: number) => {\n    try {\n      const response = await brain.update_commitment_progress({\n        commitment_id: commitmentId,\n        new_progress: newProgress\n      });\n\n      setCommitments(prev => prev.map(c =>\n        c.id === commitmentId\n          ? { ...c, current_progress: newProgress }\n          : c\n      ));\n\n      toast.success('Progress updated successfully!');\n    } catch (err) {\n      toast.error('Error updating progress. Please try again.');\n      console.error('Error updating progress:', err);\n    }\n  };\n\n  const handleClaimReward = async (commitmentId: string) => {\n    try {\n      const response = await brain.claim_reward({ commitment_id: commitmentId });\n      toast.success('Reward claimed successfully!');\n    } catch (err) {\n      toast.error('Error claiming reward. Please try again.');\n      console.error('Error claiming reward:', err);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': 'üå≥',\n      'air_quality': 'üè≠',\n      'water_management': 'üíß',\n      'biodiversity': 'ü¶ã',\n      'waste_reduction': '‚ôªÔ∏è'\n    };\n    return icons[category] || 'üåç';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white p-6\">\n      {/* Header *\n      <div className=\"max-w-7xl mx-auto mb-8\">\n        <h1 className=\"text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 mb-4\">\n          üåç EcoChain Governance\n        </h1>\n        <p className=\"text-xl text-gray-300 mb-6\">\n          Transparent environmental accountability through blockchain technology\n        </p>\n      </div>\n\n      {/* Navigation *\n      <div className=\"max-w-7xl mx-auto flex items-center space-x-4 mb-8\">\n        <button\n          onClick={() => setCurrentView('feed')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'feed'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          üì° Social Feed\n        </button>\n        <button\n          onClick={() => setCurrentView('dashboard')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'dashboard'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          üìä Dashboard\n        </button>\n      </div>\n\n      {currentView === 'dashboard' ? (\n        <CommitmentDashboard\n          commitments={commitments}\n          onUpdateProgress={handleUpdateProgress}\n          onClaimReward={handleClaimReward}\n        />\n      ) : (\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Environmental Data Cards *\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {environmentalData && (\n              <>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-red-500/20 p-6\">\n                  <div className=\"text-red-400 text-sm font-medium mb-2\">Air Quality (PM2.5)</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.pm25} Œºg/m¬≥</div>\n                  <div className=\"text-xs text-gray-400\">{environmentalData.location}</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-orange-500/20 p-6\">\n                  <div className=\"text-orange-400 text-sm font-medium mb-2\">CO2 Levels</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.co2} ppm</div>\n                  <div className=\"text-xs text-gray-400\">Atmospheric Reading</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-green-500/20 p-6\">\n                  <div className=\"text-green-400 text-sm font-medium mb-2\">Forest Cover</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.forest_cover}%</div>\n                  <div className=\"text-xs text-gray-400\">Regional Coverage</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6\">\n                  <div className=\"text-blue-400 text-sm font-medium mb-2\">Water Quality</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.water_quality}%</div>\n                  <div className=\"text-xs text-gray-400\">Quality Index</div>\n                </div>\n              </>\n            )}\n          </div>\n\n          {/* Satellite Data *\n          {satelliteData && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6 mb-8\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mr-3\">\n                  üõ∞Ô∏è\n                </div>\n                <div>\n                  <h3 className=\"text-white font-semibold\">Satellite Monitoring</h3>\n                  <p className=\"text-gray-400 text-sm\">Real-time environmental verification</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Location</div>\n                  <div className=\"text-white font-medium\">{satelliteData.location}</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Forest Coverage</div>\n                  <div className=\"text-white font-medium\">{satelliteData.forest_cover_percentage}%</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Confidence Score</div>\n                  <div className=\"text-white font-medium\">{satelliteData.confidence_score}%</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Commitment Creation Form *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center mr-3\">\n                ‚ûï\n              </span>\n              Create New Commitment\n            </h2>\n            <form onSubmit={handleCreateCommitment} className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Title</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.title}\n                  onChange={(e) => setNewCommitment({...newCommitment, title: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Commitment title\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Category</label>\n                <select \n                  value={newCommitment.category}\n                  onChange={(e) => setNewCommitment({...newCommitment, category: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                >\n                  <option value=\"forest_protection\">üå≥ Forest Protection</option>\n                  <option value=\"air_quality\">üè≠ Air Quality</option>\n                  <option value=\"water_management\">üíß Water Management</option>\n                  <option value=\"biodiversity\">ü¶ã Biodiversity</option>\n                  <option value=\"waste_reduction\">‚ôªÔ∏è Waste Reduction</option>\n                </select>\n              </div>\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Description</label>\n                <textarea\n                  value={newCommitment.description}\n                  onChange={(e) => setNewCommitment({...newCommitment, description: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Describe your environmental commitment\"\n                  rows={3}\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Target Value (%)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.target_value}\n                  onChange={(e) => setNewCommitment({...newCommitment, target_value: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Target percentage\"\n                  min=\"0\"\n                  max=\"100\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Deadline</label>\n                <input\n                  type=\"date\"\n                  value={newCommitment.deadline}\n                  onChange={(e) => setNewCommitment({...newCommitment, deadline: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Name</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_name}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_name: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your name\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Role</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_role}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_role: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your role/position\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Stake Amount (ETH)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.stake_amount}\n                  onChange={(e) => setNewCommitment({...newCommitment, stake_amount: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Stake amount\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  required\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <button\n                  type=\"submit\"\n                  className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl\"\n                >\n                  Create Commitment\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {/* Commitments Feed *\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-white flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-400 rounded-lg flex items-center justify-center mr-3\">\n                üìã\n              </span>\n              Recent Commitments\n            </h2>\n            {commitments.map((commitment) => (\n              <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center mr-4\">\n                      {getCategoryIcon(commitment.category)}\n                    </div>\n                    <div>\n                      <h3 className=\"text-white font-semibold\">{commitment.official_name}</h3>\n                      <p className=\"text-gray-400 text-sm\">{commitment.official_role}</p>\n                    </div>\n                  </div>\n                  <div className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                    commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                    commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n                    'bg-red-500/20 text-red-400'\n                  }`}>\n                    {commitment.status.toUpperCase()}\n                  </div>\n                </div>\n                <h4 className=\"text-white font-semibold text-lg mb-2\">{commitment.title}</h4>\n                <p className=\"text-gray-300 mb-4\">{commitment.description}</p>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Progress</div>\n                    <div className=\"text-white font-medium\">{commitment.current_progress}% / {commitment.target_value}%</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Deadline</div>\n                    <div className=\"text-white font-medium\">{formatDate(commitment.deadline)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Stake</div>\n                    <div className=\"text-white font-medium\">{commitment.stake_amount} ETH</div>\n                  </div>\n                </div>\n                <div className=\"w-full bg-gray-800 rounded-full h-3 mb-4\">\n                  <div \n                    className=\"bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000\" \n                    style={{width: `${calculateProgress(commitment.current_progress, commitment.target_value)}%`}}\n                  ></div>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"text-xs text-gray-400\">\n                    Created: {formatDate(commitment.created_at)} ‚Ä¢ \n                    {commitment.satellite_verified ? ' üõ∞Ô∏è Satellite Verified' : ' üìä Self-reported'}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {commitments.length === 0 && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n              <div className=\"text-6xl mb-4\">üå±</div>\n              <h3 className=\"text-white text-xl mb-2\">No commitments yet</h3>\n              <p className=\"text-gray-400\">Be the first to create an environmental commitment!</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n  */\n\n\n\n/*\n'use client';\n\nimport { useState, useEffect } from 'react';\n// For standalone project, you'll need to install and configure these:\n// npm install sonner\n// You'll also need to create your own API client or use fetch\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\n// Fixed brain client with proper return types\nconst brain = {\n  get_all_commitments: async () => ({ \n    json: async () => ({ \n      commitments: [] as Commitment[] \n    }) \n  }),\n  get_environmental_data: async () => ({ \n    json: async (): Promise<EnvironmentalData> => ({\n      location: \"Sample Location\",\n      pm25: 25.5,\n      co2: 410,\n      forest_cover: 75.2,\n      water_quality: 82,\n      timestamp: new Date().toISOString(),\n      source: \"Mock Data\"\n    }) \n  }),\n  get_satellite_data: async (params: { commitmentId: string }) => ({ \n    json: async (): Promise<SatelliteData> => ({\n      location: \"Sample Region\",\n      forest_cover_percentage: 78.5,\n      change_detected: false,\n      last_updated: new Date().toISOString(),\n      confidence_score: 94\n    }) \n  }),\n  create_commitment: async (data: CreateCommitmentRequest) => ({ \n    json: async (): Promise<Commitment> => ({\n      id: Date.now().toString(),\n      ...data,\n      current_progress: 0,\n      status: 'active',\n      created_at: new Date().toISOString(),\n      satellite_verified: false\n    }) \n  }),\n  update_commitment_progress: async (data: { commitment_id: string; new_progress: number }) => ({ \n    json: async () => ({ success: true, ...data }) \n  }),\n  claim_reward: async (data: { commitment_id: string }) => ({ \n    json: async () => ({ success: true, message: 'Reward claimed!', ...data }) \n  }),\n};\n\n// Simple toast implementation - install 'sonner' package: npm install sonner\n// import { toast } from 'sonner';\n// For now, using console.log as placeholder\nconst toast = {\n  success: (msg: string) => console.log('Success:', msg),\n  error: (msg: string) => console.error('Error:', msg),\n};\n\n// Placeholder CommitmentDashboard component - you'll need to create this\nconst CommitmentDashboard = ({ commitments, onUpdateProgress, onClaimReward }: {\n  commitments: Commitment[];\n  onUpdateProgress: (id: string, progress: number) => void;\n  onClaimReward: (id: string) => void;\n}) => (\n  <div className=\"text-white\">\n    <h2 className=\"text-2xl font-bold mb-4\">Commitment Dashboard</h2>\n    <div className=\"grid gap-4\">\n      {commitments.map(commitment => (\n        <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6\">\n          <h3 className=\"text-lg font-semibold\">{commitment.title}</h3>\n          <p className=\"text-gray-400 mb-2\">{commitment.description}</p>\n          <div className=\"flex gap-4 items-center\">\n            <span>Progress: {commitment.current_progress}%</span>\n            <button \n              onClick={() => onUpdateProgress(commitment.id, Math.min(commitment.current_progress + 10, 100))}\n              className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-3 py-1 rounded\"\n            >\n              Update +10%\n            </button>\n            {commitment.current_progress >= commitment.target_value && (\n              <button \n                onClick={() => onClaimReward(commitment.id)}\n                className=\"bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-500/50 text-yellow-400 px-3 py-1 rounded\"\n              >\n                Claim Reward\n              </button>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentView, setCurrentView] = useState<'feed' | 'dashboard'>('feed');\n\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const commitmentsResponse = await brain.get_all_commitments();\n        const commitmentsData = await commitmentsResponse.json();\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        setCommitments([]);\n      }\n\n      try {\n        const envResponse = await brain.get_environmental_data();\n        const envData = await envResponse.json();\n        setEnvironmentalData(envData);\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        // Fallback data with proper type\n        setEnvironmentalData({\n          location: \"Sample Location\",\n          pm25: 25.5,\n          co2: 410,\n          forest_cover: 75.2,\n          water_quality: 82,\n          timestamp: new Date().toISOString(),\n          source: \"Mock Data\"\n        });\n      }\n\n      try {\n        // Fixed: pass object with commitmentId property\n        const satResponse = await brain.get_satellite_data({ commitmentId: 'general' });\n        const satData = await satResponse.json();\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        // Fallback data with proper type\n        setSatelliteData({\n          location: \"Sample Region\",\n          forest_cover_percentage: 78.5,\n          change_detected: false,\n          last_updated: new Date().toISOString(),\n          confidence_score: 94\n        });\n      }\n\n    } catch (err) {\n      setError('Failed to fetch data. Using demo mode.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const response = await brain.create_commitment(commitmentData);\n      const createdCommitment = await response.json();\n\n      setCommitments(prev => [createdCommitment, ...prev]);\n\n      setNewCommitment({\n        title: '',\n        description: '',\n        category: 'forest_protection',\n        target_value: '',\n        deadline: '',\n        official_name: '',\n        official_role: '',\n        stake_amount: ''\n      });\n\n      toast.success('Commitment created successfully!');\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      toast.error(`Error creating commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  const handleUpdateProgress = async (commitmentId: string, newProgress: number) => {\n    try {\n      const response = await brain.update_commitment_progress({\n        commitment_id: commitmentId,\n        new_progress: newProgress\n      });\n\n      setCommitments(prev => prev.map(c =>\n        c.id === commitmentId\n          ? { ...c, current_progress: newProgress }\n          : c\n      ));\n\n      toast.success('Progress updated successfully!');\n    } catch (err) {\n      toast.error('Error updating progress. Please try again.');\n      console.error('Error updating progress:', err);\n    }\n  };\n\n  const handleClaimReward = async (commitmentId: string) => {\n    try {\n      const response = await brain.claim_reward({ commitment_id: commitmentId });\n      toast.success('Reward claimed successfully!');\n    } catch (err) {\n      toast.error('Error claiming reward. Please try again.');\n      console.error('Error claiming reward:', err);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': 'üå≥',\n      'air_quality': 'üè≠',\n      'water_management': 'üíß',\n      'biodiversity': 'ü¶ã',\n      'waste_reduction': '‚ôªÔ∏è'\n    };\n    return icons[category] || 'üåç';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white p-6\">\n      {/* Header *\n      <div className=\"max-w-7xl mx-auto mb-8\">\n        <h1 className=\"text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 mb-4\">\n          üåç EcoChain Governance\n        </h1>\n        <p className=\"text-xl text-gray-300 mb-6\">\n          Transparent environmental accountability through blockchain technology\n        </p>\n      </div>\n\n      {/* Navigation *\n      <div className=\"max-w-7xl mx-auto flex items-center space-x-4 mb-8\">\n        <button\n          onClick={() => setCurrentView('feed')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'feed'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          üì° Social Feed\n        </button>\n        <button\n          onClick={() => setCurrentView('dashboard')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'dashboard'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          üìä Dashboard\n        </button>\n      </div>\n\n      {currentView === 'dashboard' ? (\n        <CommitmentDashboard\n          commitments={commitments}\n          onUpdateProgress={handleUpdateProgress}\n          onClaimReward={handleClaimReward}\n        />\n      ) : (\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Environmental Data Cards *\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {environmentalData && (\n              <>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-red-500/20 p-6\">\n                  <div className=\"text-red-400 text-sm font-medium mb-2\">Air Quality (PM2.5)</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.pm25} Œºg/m¬≥</div>\n                  <div className=\"text-xs text-gray-400\">{environmentalData.location}</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-orange-500/20 p-6\">\n                  <div className=\"text-orange-400 text-sm font-medium mb-2\">CO2 Levels</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.co2} ppm</div>\n                  <div className=\"text-xs text-gray-400\">Atmospheric Reading</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-green-500/20 p-6\">\n                  <div className=\"text-green-400 text-sm font-medium mb-2\">Forest Cover</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.forest_cover}%</div>\n                  <div className=\"text-xs text-gray-400\">Regional Coverage</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6\">\n                  <div className=\"text-blue-400 text-sm font-medium mb-2\">Water Quality</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.water_quality}%</div>\n                  <div className=\"text-xs text-gray-400\">Quality Index</div>\n                </div>\n              </>\n            )}\n          </div>\n\n          {/* Satellite Data *\n          {satelliteData && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6 mb-8\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mr-3\">\n                  üõ∞Ô∏è\n                </div>\n                <div>\n                  <h3 className=\"text-white font-semibold\">Satellite Monitoring</h3>\n                  <p className=\"text-gray-400 text-sm\">Real-time environmental verification</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Location</div>\n                  <div className=\"text-white font-medium\">{satelliteData.location}</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Forest Coverage</div>\n                  <div className=\"text-white font-medium\">{satelliteData.forest_cover_percentage}%</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Confidence Score</div>\n                  <div className=\"text-white font-medium\">{satelliteData.confidence_score}%</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Commitment Creation Form *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center mr-3\">\n                ‚ûï\n              </span>\n              Create New Commitment\n            </h2>\n            <form onSubmit={handleCreateCommitment} className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Title</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.title}\n                  onChange={(e) => setNewCommitment({...newCommitment, title: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Commitment title\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Category</label>\n                <select \n                  value={newCommitment.category}\n                  onChange={(e) => setNewCommitment({...newCommitment, category: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                >\n                  <option value=\"forest_protection\">üå≥ Forest Protection</option>\n                  <option value=\"air_quality\">üè≠ Air Quality</option>\n                  <option value=\"water_management\">üíß Water Management</option>\n                  <option value=\"biodiversity\">ü¶ã Biodiversity</option>\n                  <option value=\"waste_reduction\">‚ôªÔ∏è Waste Reduction</option>\n                </select>\n              </div>\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Description</label>\n                <textarea\n                  value={newCommitment.description}\n                  onChange={(e) => setNewCommitment({...newCommitment, description: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Describe your environmental commitment\"\n                  rows={3}\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Target Value (%)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.target_value}\n                  onChange={(e) => setNewCommitment({...newCommitment, target_value: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Target percentage\"\n                  min=\"0\"\n                  max=\"100\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Deadline</label>\n                <input\n                  type=\"date\"\n                  value={newCommitment.deadline}\n                  onChange={(e) => setNewCommitment({...newCommitment, deadline: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Name</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_name}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_name: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your name\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Role</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_role}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_role: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your role/position\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Stake Amount (ETH)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.stake_amount}\n                  onChange={(e) => setNewCommitment({...newCommitment, stake_amount: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Stake amount\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  required\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <button\n                  type=\"submit\"\n                  className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl\"\n                >\n                  Create Commitment\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {/* Commitments Feed *\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-white flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-400 rounded-lg flex items-center justify-center mr-3\">\n                üìã\n              </span>\n              Recent Commitments\n            </h2>\n            {commitments.map((commitment) => (\n              <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center mr-4\">\n                      {getCategoryIcon(commitment.category)}\n                    </div>\n                    <div>\n                      <h3 className=\"text-white font-semibold\">{commitment.official_name}</h3>\n                      <p className=\"text-gray-400 text-sm\">{commitment.official_role}</p>\n                    </div>\n                  </div>\n                  <div className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                    commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                    commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n                    'bg-red-500/20 text-red-400'\n                  }`}>\n                    {commitment.status.toUpperCase()}\n                  </div>\n                </div>\n                <h4 className=\"text-white font-semibold text-lg mb-2\">{commitment.title}</h4>\n                <p className=\"text-gray-300 mb-4\">{commitment.description}</p>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Progress</div>\n                    <div className=\"text-white font-medium\">{commitment.current_progress}% / {commitment.target_value}%</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Deadline</div>\n                    <div className=\"text-white font-medium\">{formatDate(commitment.deadline)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Stake</div>\n                    <div className=\"text-white font-medium\">{commitment.stake_amount} ETH</div>\n                  </div>\n                </div>\n                <div className=\"w-full bg-gray-800 rounded-full h-3 mb-4\">\n                  <div \n                    className=\"bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000\" \n                    style={{width: `${calculateProgress(commitment.current_progress, commitment.target_value)}%`}}\n                  ></div>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"text-xs text-gray-400\">\n                    Created: {formatDate(commitment.created_at)} ‚Ä¢ \n                    {commitment.satellite_verified ? ' üõ∞Ô∏è Satellite Verified' : ' üìä Self-reported'}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {commitments.length === 0 && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n              <div className=\"text-6xl mb-4\">üå±</div>\n              <h3 className=\"text-white text-xl mb-2\">No commitments yet</h3>\n              <p className=\"text-gray-400\">Be the first to create an environmental commitment!</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n*/\n\n/*\n'use client';\n\nimport { useState, useEffect } from 'react';\n// For standalone project, you'll need to install and configure these:\n// npm install sonner\n// You'll also need to create your own API client or use fetch\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n  reward_claimed?: boolean;\n  reward_amount?: number;\n  completion_date?: string;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\n// Fixed brain client with proper return types\nconst brain = {\n  get_all_commitments: async () => ({ \n    ok: true,\n    json: async () => ({ \n      commitments: [] as Commitment[] \n    }) \n  }),\n  get_environmental_data: async () => ({ \n    ok: true,\n    json: async (): Promise<EnvironmentalData> => ({\n      location: \"Sample Location\",\n      pm25: Math.random() * 50 + 10, // Random values for demo\n      co2: Math.random() * 50 + 400,\n      forest_cover: Math.random() * 30 + 60,\n      water_quality: Math.random() * 40 + 60,\n      timestamp: new Date().toISOString(),\n      source: \"Mock Data\"\n    }) \n  }),\n  get_satellite_data: async (params: { commitmentId: string }) => ({ \n    ok: true,\n    json: async (): Promise<SatelliteData> => ({\n      location: \"Sample Region\",\n      forest_cover_percentage: Math.random() * 20 + 70, // Random values for demo\n      change_detected: Math.random() > 0.5,\n      last_updated: new Date().toISOString(),\n      confidence_score: Math.random() * 20 + 80\n    }) \n  }),\n  create_commitment: async (data: CreateCommitmentRequest) => ({ \n    ok: true,\n    json: async (): Promise<Commitment> => ({\n      id: Date.now().toString(),\n      ...data,\n      current_progress: 0,\n      status: 'active',\n      created_at: new Date().toISOString(),\n      satellite_verified: false\n    }) \n  }),\n  update_commitment_progress: async (data: { commitment_id: string; new_progress: number }) => ({ \n    ok: true,\n    json: async () => ({ success: true, ...data }) \n  }),\n  claim_reward: async (data: { commitment_id: string }) => ({ \n    ok: true,\n    json: async () => ({ \n      success: true, \n      message: 'Reward claimed successfully!', \n      reward_amount: Math.random() * 5 + 1, // Random reward between 1-6 ETH\n      transaction_hash: '0x' + Math.random().toString(16).substr(2, 40),\n      ...data \n    }) \n  }),\n};\n\n// Simple toast implementation - install 'sonner' package: npm install sonner\n// import { toast } from 'sonner';\n// For now, using console.log as placeholder\nconst toast = {\n  success: (msg: string) => console.log('Success:', msg),\n  error: (msg: string) => console.error('Error:', msg),\n};\n\n// Placeholder CommitmentDashboard component - you'll need to create this\nconst CommitmentDashboard = ({ commitments, onUpdateProgress, onClaimReward }: {\n  commitments: Commitment[];\n  onUpdateProgress: (id: string, progress: number) => void;\n  onClaimReward: (id: string) => void;\n}) => (\n  <div className=\"text-white\">\n    <h2 className=\"text-2xl font-bold mb-4\">Commitment Dashboard</h2>\n    <div className=\"grid gap-4\">\n      {commitments.map(commitment => (\n        <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6\">\n          <h3 className=\"text-lg font-semibold\">{commitment.title}</h3>\n          <p className=\"text-gray-400 mb-2\">{commitment.description}</p>\n          <div className=\"flex gap-4 items-center flex-wrap\">\n            <span>Progress: {commitment.current_progress}%</span>\n            <span className={`px-2 py-1 rounded text-xs ${\n              commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n              commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n              commitment.status === 'rewarded' ? 'bg-yellow-500/20 text-yellow-400' :\n              'bg-red-500/20 text-red-400'\n            }`}>\n              {commitment.status.toUpperCase()}\n            </span>\n            {commitment.status === 'active' && (\n              <button \n                onClick={() => onUpdateProgress(commitment.id, Math.min(commitment.current_progress + 10, 100))}\n                className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-3 py-1 rounded\"\n              >\n                Update +10%\n              </button>\n            )}\n            {commitment.current_progress >= commitment.target_value && commitment.status !== 'rewarded' && (\n              <button \n                onClick={() => onClaimReward(commitment.id)}\n                className=\"bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-500/50 text-yellow-400 px-3 py-1 rounded\"\n              >\n                Claim Reward\n              </button>\n            )}\n            {commitment.reward_claimed && (\n              <span className=\"text-yellow-400 text-sm\">\n                üí∞ Reward: {commitment.reward_amount?.toFixed(2)} ETH\n              </span>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentView, setCurrentView] = useState<'feed' | 'dashboard'>('feed');\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  useEffect(() => {\n    fetchAllData();\n    \n    // Set up interval for real-time updates every 30 seconds\n    const interval = setInterval(() => {\n      fetchAllData();\n    }, 30000); // 30 seconds\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const commitmentsResponse = await brain.get_all_commitments();\n        const commitmentsData = await commitmentsResponse.json();\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        setCommitments([]);\n      }\n\n      try {\n        const envResponse = await brain.get_environmental_data();\n        const envData = await envResponse.json();\n        setEnvironmentalData(envData);\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        // Fallback data with proper type\n        setEnvironmentalData({\n          location: \"Sample Location\",\n          pm25: Math.random() * 50 + 10,\n          co2: Math.random() * 50 + 400,\n          forest_cover: Math.random() * 30 + 60,\n          water_quality: Math.random() * 40 + 60,\n          timestamp: new Date().toISOString(),\n          source: \"Mock Data\"\n        });\n      }\n\n      try {\n        // Fixed: pass object with commitmentId property\n        const satResponse = await brain.get_satellite_data({ commitmentId: 'general' });\n        const satData = await satResponse.json();\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        // Fallback data with proper type\n        setSatelliteData({\n          location: \"Sample Region\",\n          forest_cover_percentage: Math.random() * 20 + 70,\n          change_detected: Math.random() > 0.5,\n          last_updated: new Date().toISOString(),\n          confidence_score: Math.random() * 20 + 80\n        });\n      }\n\n      // Update timestamp to show data freshness\n      setLastUpdated(new Date());\n\n    } catch (err) {\n      setError('Failed to fetch data. Using demo mode.');\n      console.error('Error fetching data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      // First create in database (not just state)\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const response = await brain.create_commitment(commitmentData);\n      \n      if (response.ok) {\n        // After creating, refresh from database instead of just updating state\n        await fetchAllData(); // This will get persisted data\n        \n        // Reset form\n        setNewCommitment({\n          title: '',\n          description: '',\n          category: 'forest_protection',\n          target_value: '',\n          deadline: '',\n          official_name: '',\n          official_role: '',\n          stake_amount: ''\n        });\n\n        toast.success('Commitment created successfully!');\n      } else {\n        throw new Error('Failed to create commitment');\n      }\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      toast.error(`Error creating commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    }\n  };\n\n  const handleUpdateProgress = async (commitmentId: string, newProgress: number) => {\n    try {\n      const response = await brain.update_commitment_progress({\n        commitment_id: commitmentId,\n        new_progress: newProgress\n      });\n\n      if (response.ok) {\n        // Update local state\n        setCommitments(prev => prev.map(c =>\n          c.id === commitmentId\n            ? { \n                ...c, \n                current_progress: newProgress,\n                status: newProgress >= c.target_value ? 'completed' : 'active'\n              }\n            : c\n        ));\n\n        toast.success('Progress updated successfully!');\n        \n        // Refresh data to ensure consistency\n        await fetchAllData();\n      } else {\n        throw new Error('Failed to update progress');\n      }\n    } catch (err) {\n      toast.error('Error updating progress. Please try again.');\n      console.error('Error updating progress:', err);\n    }\n  };\n\n  const handleClaimReward = async (commitmentId: string) => {\n    try {\n      const response = await brain.claim_reward({ commitment_id: commitmentId });\n      \n      if (response.ok) {\n        const result = await response.json();\n        \n        // Update commitment status to 'rewarded'\n        setCommitments(prev => \n          prev.map(c => \n            c.id === commitmentId \n              ? { \n                  ...c, \n                  status: 'rewarded',\n                  reward_claimed: true,\n                  reward_amount: result.reward_amount,\n                  completion_date: new Date().toISOString()\n                }\n              : c\n          )\n        );\n        \n        // Show success message with details\n        alert(`üéâ ${result.message}\\nReward: ${result.reward_amount?.toFixed(2)} ETH\\nTransaction: ${result.transaction_hash}`);\n        \n        // Refresh data to ensure consistency\n        await fetchAllData();\n      } else {\n        throw new Error('Failed to claim reward');\n      }\n    } catch (err) {\n      alert('Error claiming reward. Please try again.');\n      console.error('Error claiming reward:', err);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': 'üå≥',\n      'air_quality': 'üè≠',\n      'water_management': 'üíß',\n      'biodiversity': 'ü¶ã',\n      'waste_reduction': '‚ôªÔ∏è'\n    };\n    return icons[category] || 'üåç';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading CivicXChain...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white p-6\">\n      {/* Header *\n      <div className=\"max-w-7xl mx-auto mb-8\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 mb-4\">\n              üåç EcoChain Governance\n            </h1>\n            <p className=\"text-xl text-gray-300 mb-6\">\n              Transparent environmental accountability through blockchain technology\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-gray-400\">Last Updated</div>\n            <div className=\"text-cyan-400 font-medium\">{formatTime(lastUpdated)}</div>\n            <div className=\"text-xs text-gray-500\">{lastUpdated.toLocaleDateString()}</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation *\n      <div className=\"max-w-7xl mx-auto flex items-center space-x-4 mb-8\">\n        <button\n          onClick={() => setCurrentView('feed')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'feed'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          üì° Social Feed\n        </button>\n        <button\n          onClick={() => setCurrentView('dashboard')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'dashboard'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          üìä Dashboard\n        </button>\n      </div>\n\n      {currentView === 'dashboard' ? (\n        <CommitmentDashboard\n          commitments={commitments}\n          onUpdateProgress={handleUpdateProgress}\n          onClaimReward={handleClaimReward}\n        />\n      ) : (\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Environmental Data Cards *\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {environmentalData && (\n              <>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-red-500/20 p-6\">\n                  <div className=\"text-red-400 text-sm font-medium mb-2\">Air Quality (PM2.5)</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.pm25.toFixed(1)} Œºg/m¬≥</div>\n                  <div className=\"text-xs text-gray-400\">{environmentalData.location}</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-orange-500/20 p-6\">\n                  <div className=\"text-orange-400 text-sm font-medium mb-2\">CO2 Levels</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.co2.toFixed(1)} ppm</div>\n                  <div className=\"text-xs text-gray-400\">Atmospheric Reading</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-green-500/20 p-6\">\n                  <div className=\"text-green-400 text-sm font-medium mb-2\">Forest Cover</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.forest_cover.toFixed(1)}%</div>\n                  <div className=\"text-xs text-gray-400\">Regional Coverage</div>\n                </div>\n                <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6\">\n                  <div className=\"text-blue-400 text-sm font-medium mb-2\">Water Quality</div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.water_quality.toFixed(1)}%</div>\n                  <div className=\"text-xs text-gray-400\">Quality Index</div>\n                </div>\n              </>\n            )}\n          </div>\n\n          {/* Satellite Data *\n          {satelliteData && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6 mb-8\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mr-3\">\n                  üõ∞Ô∏è\n                </div>\n                <div>\n                  <h3 className=\"text-white font-semibold\">Satellite Monitoring</h3>\n                  <p className=\"text-gray-400 text-sm\">Real-time environmental verification</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Location</div>\n                  <div className=\"text-white font-medium\">{satelliteData.location}</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Forest Coverage</div>\n                  <div className=\"text-white font-medium\">{satelliteData.forest_cover_percentage.toFixed(1)}%</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Change Detected</div>\n                  <div className={`font-medium ${satelliteData.change_detected ? 'text-yellow-400' : 'text-green-400'}`}>\n                    {satelliteData.change_detected ? '‚ö†Ô∏è Yes' : '‚úÖ No'}\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Confidence Score</div>\n                  <div className=\"text-white font-medium\">{satelliteData.confidence_score.toFixed(1)}%</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Commitment Creation Form *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center mr-3\">\n                ‚ûï\n              </span>\n              Create New Commitment\n            </h2>\n            <form onSubmit={handleCreateCommitment} className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Title</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.title}\n                  onChange={(e) => setNewCommitment({...newCommitment, title: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Commitment title\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Category</label>\n                <select \n                  value={newCommitment.category}\n                  onChange={(e) => setNewCommitment({...newCommitment, category: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                >\n                  <option value=\"forest_protection\">üå≥ Forest Protection</option>\n                  <option value=\"air_quality\">üè≠ Air Quality</option>\n                  <option value=\"water_management\">üíß Water Management</option>\n                  <option value=\"biodiversity\">ü¶ã Biodiversity</option>\n                  <option value=\"waste_reduction\">‚ôªÔ∏è Waste Reduction</option>\n                </select>\n              </div>\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Description</label>\n                <textarea\n                  value={newCommitment.description}\n                  onChange={(e) => setNewCommitment({...newCommitment, description: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Describe your environmental commitment\"\n                  rows={3}\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Target Value (%)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.target_value}\n                  onChange={(e) => setNewCommitment({...newCommitment, target_value: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Target percentage\"\n                  min=\"0\"\n                  max=\"100\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Deadline</label>\n                <input\n                  type=\"date\"\n                  value={newCommitment.deadline}\n                  onChange={(e) => setNewCommitment({...newCommitment, deadline: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white focus:border-cyan-400\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Name</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_name}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_name: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your name\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Role</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_role}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_role: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Your role/position\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Stake Amount (ETH)</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.stake_amount}\n                  onChange={(e) => setNewCommitment({...newCommitment, stake_amount: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400\"\n                  placeholder=\"Stake amount\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  required\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <button\n                  type=\"submit\"\n                  className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl\"\n                >\n                  Create Commitment\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {/* Commitments Feed *\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-white flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-400 rounded-lg flex items-center justify-center mr-3\">\n                üìã\n              </span>\n              Recent Commitments\n            </h2>\n            {commitments.map((commitment) => (\n              <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center mr-4\">\n                      {getCategoryIcon(commitment.category)}\n                    </div>\n                    <div>\n                      <h3 className=\"text-white font-semibold\">{commitment.official_name}</h3>\n                      <p className=\"text-gray-400 text-sm\">{commitment.official_role}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <div className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                      commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                      commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n                      commitment.status === 'rewarded' ? 'bg-yellow-500/20 text-yellow-400' :\n                      'bg-red-500/20 text-red-400'\n                    }`}>\n                      {commitment.status.toUpperCase()}\n                    </div>\n                    {commitment.reward_claimed && (\n                      <div className=\"px-3 py-1 rounded-full text-sm font-semibold bg-yellow-500/20 text-yellow-400\">\n                        üí∞ {commitment.reward_amount?.toFixed(2)} ETH\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <h4 className=\"text-white font-semibold text-lg mb-2\">{commitment.title}</h4>\n                <p className=\"text-gray-300 mb-4\">{commitment.description}</p>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Progress</div>\n                    <div className=\"text-white font-medium\">{commitment.current_progress}% / {commitment.target_value}%</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Deadline</div>\n                    <div className=\"text-white font-medium\">{formatDate(commitment.deadline)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Stake</div>\n                    <div className=\"text-white font-medium\">{commitment.stake_amount} ETH</div>\n                  </div>\n                </div>\n                <div className=\"w-full bg-gray-800 rounded-full h-3 mb-4\">\n                  <div \n                    className=\"bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000\" \n                    style={{width: `${calculateProgress(commitment.current_progress, commitment.target_value)}%`}}\n                  ></div>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"text-xs text-gray-400\">\n                    Created: {formatDate(commitment.created_at)} ‚Ä¢ \n                    {commitment.satellite_verified ? ' üõ∞Ô∏è Satellite Verified' : ' üìä Self-reported'}\n                    {commitment.completion_date && ` ‚Ä¢ Completed: ${formatDate(commitment.completion_date)}`}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {commitments.length === 0 && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n              <div className=\"text-6xl mb-4\">üå±</div>\n              <h3 className=\"text-white text-xl mb-2\">No commitments yet</h3>\n              <p className=\"text-gray-400\">Be the first to create an environmental commitment!</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n  */\n\n\n\n/*\n\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { toast } from 'sonner';\n\n// Types for the data structures\ninterface Commitment {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  current_progress: number;\n  deadline: string;\n  status: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n  created_at: string;\n  satellite_verified: boolean;\n  reward_claimed?: boolean;\n  reward_amount?: number;\n  completion_date?: string;\n}\n\ninterface EnvironmentalData {\n  location: string;\n  pm25: number;\n  co2: number;\n  forest_cover: number;\n  water_quality: number;\n  timestamp: string;\n  source: string;\n}\n\ninterface SatelliteData {\n  location: string;\n  forest_cover_percentage: number;\n  change_detected: boolean;\n  last_updated: string;\n  confidence_score: number;\n}\n\ninterface CreateCommitmentRequest {\n  title: string;\n  description: string;\n  category: string;\n  target_value: number;\n  deadline: string;\n  official_name: string;\n  official_role: string;\n  stake_amount: number;\n}\n\n// Real API client (replace with your actual API endpoints)\nconst apiClient = {\n  baseUrl: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',\n  \n  async request(endpoint: string, options: RequestInit = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status} ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n\n  // Real API methods\n  async getAllCommitments(): Promise<{ commitments: Commitment[] }> {\n    return this.request('/api/commitments');\n  },\n\n  async getEnvironmentalData(): Promise<EnvironmentalData> {\n    return this.request('/api/environmental-data');\n  },\n\n  async getSatelliteData(commitmentId: string): Promise<SatelliteData> {\n    return this.request(`/api/satellite-data?commitmentId=${commitmentId}`);\n  },\n\n  async createCommitment(data: CreateCommitmentRequest): Promise<Commitment> {\n    return this.request('/api/commitments', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  },\n\n  async updateCommitmentProgress(commitmentId: string, newProgress: number): Promise<{ success: boolean }> {\n    return this.request(`/api/commitments/${commitmentId}/progress`, {\n      method: 'PUT',\n      body: JSON.stringify({ new_progress: newProgress }),\n    });\n  },\n\n  async claimReward(commitmentId: string): Promise<{ \n    success: boolean; \n    message: string; \n    reward_amount: number; \n    transaction_hash: string; \n  }> {\n    return this.request(`/api/commitments/${commitmentId}/claim-reward`, {\n      method: 'POST',\n    });\n  },\n\n  // Real environmental data sources\n  async getAirQualityData(location: string): Promise<{ pm25: number; co2: number }> {\n    // OpenAQ API integration\n    const response = await fetch(`https://api.openaq.org/v2/latest?location=${location}&parameter=pm25`);\n    if (!response.ok) throw new Error('Failed to fetch air quality data');\n    const data = await response.json();\n    return {\n      pm25: data.results?.[0]?.measurements?.[0]?.value || 0,\n      co2: Math.random() * 50 + 400, // Replace with real CO2 API\n    };\n  },\n\n  async getForestCoverData(coordinates: { lat: number; lon: number }): Promise<{ forest_cover: number }> {\n    // NASA Earthdata or Google Earth Engine integration\n    // This would require proper API keys and authentication\n    try {\n      // Placeholder for real satellite data API call\n      const response = await fetch(`/api/forest-cover?lat=${coordinates.lat}&lon=${coordinates.lon}`);\n      const data = await response.json();\n      return { forest_cover: data.forest_cover_percentage };\n    } catch (error) {\n      console.error('Forest cover data unavailable:', error);\n      return { forest_cover: 75 }; // Fallback value\n    }\n  },\n\n  async getWaterQualityData(region: string): Promise<{ water_quality: number }> {\n    // WHO or local water quality API integration\n    try {\n      const response = await fetch(`/api/water-quality?region=${region}`);\n      const data = await response.json();\n      return { water_quality: data.quality_index };\n    } catch (error) {\n      console.error('Water quality data unavailable:', error);\n      return { water_quality: 80 }; // Fallback value\n    }\n  }\n};\n\n// Blockchain integration for rewards\nconst blockchainClient = {\n  async connectWallet(): Promise<string | null> {\n    if (typeof window !== 'undefined' && window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        return accounts[0];\n      } catch (error) {\n        console.error('Failed to connect wallet:', error);\n        return null;\n      }\n    }\n    return null;\n  },\n\n  async claimReward(commitmentId: string, amount: number): Promise<string> {\n    // Real smart contract interaction\n    if (typeof window !== 'undefined' && window.ethereum) {\n      try {\n        // This would be your actual smart contract interaction\n        const transactionHash = await window.ethereum.request({\n          method: 'eth_sendTransaction',\n          params: [{\n            // Your smart contract parameters\n            to: '0x...', // Your contract address\n            data: '0x...', // Encoded function call\n            value: '0x0',\n          }],\n        });\n        return transactionHash;\n      } catch (error) {\n        throw new Error('Blockchain transaction failed');\n      }\n    }\n    throw new Error('Wallet not connected');\n  }\n};\n\n// Real CommitmentDashboard component\nconst CommitmentDashboard = ({ \n  commitments, \n  onUpdateProgress, \n  onClaimReward \n}: {\n  commitments: Commitment[];\n  onUpdateProgress: (id: string, progress: number) => void;\n  onClaimReward: (id: string) => void;\n}) => {\n  const [selectedCommitment, setSelectedCommitment] = useState<string | null>(null);\n  const [progressInput, setProgressInput] = useState<number>(0);\n\n  return (\n    <div className=\"text-white space-y-6\">\n      <h2 className=\"text-3xl font-bold mb-6 bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n        üìä Commitment Dashboard\n      </h2>\n      \n      <div className=\"grid gap-6\">\n        {commitments.map(commitment => (\n          <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 hover:border-cyan-500/40 transition-all duration-300\">\n            <div className=\"flex justify-between items-start mb-4\">\n              <div>\n                <h3 className=\"text-xl font-semibold text-white mb-2\">{commitment.title}</h3>\n                <p className=\"text-gray-400 mb-2\">{commitment.description}</p>\n                <div className=\"text-sm text-gray-500\">\n                  By {commitment.official_name} ({commitment.official_role})\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className={`px-3 py-1 rounded-full text-sm font-semibold mb-2 ${\n                  commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                  commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n                  commitment.status === 'rewarded' ? 'bg-yellow-500/20 text-yellow-400' :\n                  'bg-red-500/20 text-red-400'\n                }`}>\n                  {commitment.status.toUpperCase()}\n                </div>\n                {commitment.satellite_verified && (\n                  <div className=\"text-xs text-purple-400\">üõ∞Ô∏è Satellite Verified</div>\n                )}\n              </div>\n            </div>\n\n            {/* Progress Bar *\n            <div className=\"mb-4\">\n              <div className=\"flex justify-between text-sm mb-2\">\n                <span className=\"text-gray-400\">Progress</span>\n                <span className=\"text-white\">{commitment.current_progress}% / {commitment.target_value}%</span>\n              </div>\n              <div className=\"w-full bg-gray-800 rounded-full h-3\">\n                <div \n                  className=\"bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000\"\n                  style={{width: `${Math.min((commitment.current_progress / commitment.target_value) * 100, 100)}%`}}\n                ></div>\n              </div>\n            </div>\n\n            {/* Action Buttons *\n            <div className=\"flex gap-4 items-center flex-wrap\">\n              {commitment.status === 'active' && (\n                <div className=\"flex gap-2 items-center\">\n                  <input\n                    type=\"number\"\n                    min={commitment.current_progress}\n                    max={100}\n                    value={selectedCommitment === commitment.id ? progressInput : commitment.current_progress}\n                    onChange={(e) => {\n                      setSelectedCommitment(commitment.id);\n                      setProgressInput(Number(e.target.value));\n                    }}\n                    className=\"w-20 bg-black/50 border border-cyan-500/30 rounded px-2 py-1 text-white text-sm\"\n                  />\n                  <button \n                    onClick={() => {\n                      onUpdateProgress(commitment.id, progressInput);\n                      setSelectedCommitment(null);\n                    }}\n                    className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-3 py-1 rounded text-sm transition-all duration-200\"\n                  >\n                    Update Progress\n                  </button>\n                </div>\n              )}\n              \n              {commitment.current_progress >= commitment.target_value && \n               commitment.status !== 'rewarded' && \n               !commitment.reward_claimed && (\n                <button \n                  onClick={() => onClaimReward(commitment.id)}\n                  className=\"bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-500/50 text-yellow-400 px-4 py-2 rounded font-medium transition-all duration-200 hover:scale-105\"\n                >\n                  üèÜ Claim Reward\n                </button>\n              )}\n              \n              {commitment.reward_claimed && (\n                <div className=\"flex items-center gap-2 text-yellow-400\">\n                  <span className=\"text-2xl\">üí∞</span>\n                  <span className=\"font-medium\">\n                    Reward: {commitment.reward_amount?.toFixed(4)} ETH\n                  </span>\n                </div>\n              )}\n            </div>\n\n            {/* Details *\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4 pt-4 border-t border-gray-700\">\n              <div>\n                <div className=\"text-xs text-gray-400\">Deadline</div>\n                <div className=\"text-sm text-white\">{new Date(commitment.deadline).toLocaleDateString()}</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-400\">Stake</div>\n                <div className=\"text-sm text-white\">{commitment.stake_amount} ETH</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-400\">Category</div>\n                <div className=\"text-sm text-white\">{commitment.category.replace('_', ' ')}</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-gray-400\">Created</div>\n                <div className=\"text-sm text-white\">{new Date(commitment.created_at).toLocaleDateString()}</div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {commitments.length === 0 && (\n        <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n          <div className=\"text-6xl mb-4\">üìä</div>\n          <h3 className=\"text-white text-xl mb-2\">No commitments to manage</h3>\n          <p className=\"text-gray-400\">Create your first environmental commitment to get started!</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default function Home() {\n  const [commitments, setCommitments] = useState<Commitment[]>([]);\n  const [environmentalData, setEnvironmentalData] = useState<EnvironmentalData | null>(null);\n  const [satelliteData, setSatelliteData] = useState<SatelliteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentView, setCurrentView] = useState<'feed' | 'dashboard'>('feed');\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [walletAddress, setWalletAddress] = useState<string | null>(null);\n\n  const [newCommitment, setNewCommitment] = useState({\n    title: '',\n    description: '',\n    category: 'forest_protection',\n    target_value: '',\n    deadline: '',\n    official_name: '',\n    official_role: '',\n    stake_amount: ''\n  });\n\n  useEffect(() => {\n    fetchAllData();\n    connectWallet();\n    \n    // Set up interval for real-time updates every 30 seconds\n    const interval = setInterval(() => {\n      fetchAllData();\n    }, 30000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const connectWallet = async () => {\n    const address = await blockchainClient.connectWallet();\n    setWalletAddress(address);\n  };\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch commitments\n      try {\n        const commitmentsData = await apiClient.getAllCommitments();\n        setCommitments(commitmentsData.commitments || []);\n      } catch (err) {\n        console.error('Error fetching commitments:', err);\n        toast.error('Failed to load commitments');\n      }\n\n      // Fetch real environmental data\n      try {\n        const location = \"Global\"; // You can make this dynamic\n        const coordinates = { lat: 40.7128, lon: -74.0060 }; // NYC coordinates as example\n        \n        const [airQuality, forestCover, waterQuality] = await Promise.all([\n          apiClient.getAirQualityData(location),\n          apiClient.getForestCoverData(coordinates),\n          apiClient.getWaterQualityData(location)\n        ]);\n\n        setEnvironmentalData({\n          location,\n          pm25: airQuality.pm25,\n          co2: airQuality.co2,\n          forest_cover: forestCover.forest_cover,\n          water_quality: waterQuality.water_quality,\n          timestamp: new Date().toISOString(),\n          source: \"Real-time APIs\"\n        });\n      } catch (err) {\n        console.error('Error fetching environmental data:', err);\n        toast.error('Failed to load environmental data');\n      }\n\n      // Fetch real satellite data\n      try {\n        const satData = await apiClient.getSatelliteData('general');\n        setSatelliteData(satData);\n      } catch (err) {\n        console.error('Error fetching satellite data:', err);\n        toast.error('Failed to load satellite data');\n      }\n\n      setLastUpdated(new Date());\n\n    } catch (err) {\n      setError('Failed to fetch data. Please check your connection.');\n      console.error('Error fetching data:', err);\n      toast.error('Failed to load data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCommitment = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      const commitmentData: CreateCommitmentRequest = {\n        title: newCommitment.title,\n        description: newCommitment.description,\n        category: newCommitment.category,\n        target_value: parseFloat(newCommitment.target_value),\n        deadline: newCommitment.deadline,\n        official_name: newCommitment.official_name,\n        official_role: newCommitment.official_role,\n        stake_amount: parseFloat(newCommitment.stake_amount)\n      };\n\n      const newCommitmentResponse = await apiClient.createCommitment(commitmentData);\n      \n      // Add to local state immediately for better UX\n      setCommitments(prev => [newCommitmentResponse, ...prev]);\n      \n      // Reset form\n      setNewCommitment({\n        title: '',\n        description: '',\n        category: 'forest_protection',\n        target_value: '',\n        deadline: '',\n        official_name: '',\n        official_role: '',\n        stake_amount: ''\n      });\n\n      toast.success('Commitment created successfully! üéâ');\n      \n      // Refresh data to ensure consistency\n      await fetchAllData();\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      toast.error(`Failed to create commitment: ${errorMessage}`);\n      console.error('Error creating commitment:', err);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleUpdateProgress = async (commitmentId: string, newProgress: number) => {\n    try {\n      await apiClient.updateCommitmentProgress(commitmentId, newProgress);\n\n      // Update local state\n      setCommitments(prev => prev.map(c =>\n        c.id === commitmentId\n          ? { \n              ...c, \n              current_progress: newProgress,\n              status: newProgress >= c.target_value ? 'completed' : 'active'\n            }\n          : c\n      ));\n\n      toast.success('Progress updated successfully! üìà');\n      \n      // Refresh data to ensure consistency\n      await fetchAllData();\n\n    } catch (err) {\n      toast.error('Failed to update progress. Please try again.');\n      console.error('Error updating progress:', err);\n    }\n  };\n\n  const handleClaimReward = async (commitmentId: string) => {\n    try {\n      if (!walletAddress) {\n        toast.error('Please connect your wallet first');\n        await connectWallet();\n        return;\n      }\n\n      const result = await apiClient.claimReward(commitmentId);\n      \n      // Process blockchain transaction\n      const transactionHash = await blockchainClient.claimReward(commitmentId, result.reward_amount);\n      \n      // Update commitment status\n      setCommitments(prev => \n        prev.map(c => \n          c.id === commitmentId \n            ? { \n                ...c, \n                status: 'rewarded',\n                reward_claimed: true,\n                reward_amount: result.reward_amount,\n                completion_date: new Date().toISOString()\n              }\n            : c\n        )\n      );\n      \n      toast.success(`üéâ ${result.message}\\nüí∞ Reward: ${result.reward_amount.toFixed(4)} ETH\\nüîó TX: ${transactionHash.slice(0, 10)}...`);\n      \n      // Refresh data\n      await fetchAllData();\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Please try again.';\n      toast.error(`Failed to claim reward: ${errorMessage}`);\n      console.error('Error claiming reward:', err);\n    }\n  };\n\n  // Helper functions\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      'forest_protection': 'üå≥',\n      'air_quality': 'üè≠',\n      'water_management': 'üíß',\n      'biodiversity': 'ü¶ã',\n      'waste_reduction': '‚ôªÔ∏è'\n    };\n    return icons[category] || 'üåç';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const calculateProgress = (current: number, target: number) => {\n    return Math.min((current / target) * 100, 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-cyan-400 mx-auto mb-4\"></div>\n          <p className=\"text-white text-xl\">Loading EcoChain Governance...</p>\n          <p className=\"text-gray-400 text-sm mt-2\">Connecting to blockchain and environmental APIs...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-6xl mb-4\">‚ö†Ô∏è</div>\n          <h2 className=\"text-white text-2xl mb-4\">Connection Error</h2>\n          <p className=\"text-gray-400 mb-6\">{error}</p>\n          <button \n            onClick={fetchAllData}\n            className=\"bg-cyan-500 hover:bg-cyan-600 text-white px-6 py-3 rounded-lg transition-colors\"\n          >\n            Retry Connection\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white p-6\">\n      {/* Header *\n      <div className=\"max-w-7xl mx-auto mb-8\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 mb-4\">\n              üåç EcoChain Governance\n            </h1>\n            <p className=\"text-xl text-gray-300 mb-6\">\n              Transparent environmental accountability through blockchain technology\n            </p>\n            {walletAddress && (\n              <div className=\"text-sm text-cyan-400\">\n                üîó Wallet: {walletAddress.slice(0, 6)}...{walletAddress.slice(-4)}\n              </div>\n            )}\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-gray-400\">Last Updated</div>\n            <div className=\"text-cyan-400 font-medium\">{formatTime(lastUpdated)}</div>\n            <div className=\"text-xs text-gray-500\">{lastUpdated.toLocaleDateString()}</div>\n            <button \n              onClick={fetchAllData}\n              className=\"mt-2 text-xs bg-cyan-500/20 hover:bg-cyan-500/30 px-3 py-1 rounded border border-cyan-500/50 transition-colors\"\n            >\n              üîÑ Refresh\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation *\n      <div className=\"max-w-7xl mx-auto flex items-center space-x-4 mb-8\">\n        <button\n          onClick={() => setCurrentView('feed')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'feed'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          üì° Social Feed\n        </button>\n        <button\n          onClick={() => setCurrentView('dashboard')}\n          className={`px-6 py-3 rounded-lg transition-all duration-300 font-medium ${\n            currentView === 'dashboard'\n              ? 'bg-cyan-500/30 text-cyan-400 border border-cyan-500/50 shadow-lg shadow-cyan-500/20'\n              : 'text-gray-400 hover:text-cyan-400 hover:bg-cyan-500/10'\n          }`}\n        >\n          üìä Dashboard\n        </button>\n      </div>\n\n      {currentView === 'dashboard' ? (\n        <div className=\"max-w-7xl mx-auto\">\n          <CommitmentDashboard\n            commitments={commitments}\n            onUpdateProgress={handleUpdateProgress}\n            onClaimReward={handleClaimReward}\n          />\n        </div>\n      ) : (\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Environmental Data Cards *\n          {environmentalData && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-red-500/20 p-6 hover:border-red-500/40 transition-all duration-300\">\n                <div className=\"text-red-400 text-sm font-medium mb-2\">Air Quality (PM2.5)</div>\n                <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.pm25.toFixed(1)} Œºg/m¬≥</div>\n                <div className=\"text-xs text-gray-400\">{environmentalData.location}</div>\n                <div className=\"text-xs text-gray-500 mt-1\">Source: {environmentalData.source}</div>\n              </div>\n              <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-orange-500/20 p-6 hover:border-orange-500/40 transition-all duration-300\">\n                <div className=\"text-orange-400 text-sm font-medium mb-2\">CO2 Levels</div>\n                <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.co2.toFixed(1)} ppm</div>\n                <div className=\"text-xs text-gray-400\">Atmospheric Reading</div>\n                <div className=\"text-xs text-gray-500 mt-1\">Real-time monitoring</div>\n              </div>\n              <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-green-500/20 p-6 hover:border-green-500/40 transition-all duration-300\">\n                <div className=\"text-green-400 text-sm font-medium mb-2\">Forest Cover</div>\n                <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.forest_cover.toFixed(1)}%</div>\n                <div className=\"text-xs text-gray-400\">Regional Coverage</div>\n                <div className=\"text-xs text-gray-500 mt-1\">Satellite verified</div>\n              </div>\n              <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300\">\n                <div className=\"text-blue-400 text-sm font-medium mb-2\">Water Quality</div>\n                <div className=\"text-3xl font-bold text-white mb-1\">{environmentalData.water_quality.toFixed(1)}%</div>\n                <div className=\"text-xs text-gray-400\">Quality Index</div>\n                <div className=\"text-xs text-gray-500 mt-1\">WHO standards</div>\n              </div>\n            </div>\n          )}\n\n          {/* Satellite Data *\n          {satelliteData && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-purple-500/20 p-6 mb-8 hover:border-purple-500/40 transition-all duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mr-3\">\n                  üõ∞Ô∏è\n                </div>\n                <div>\n                  <h3 className=\"text-white font-semibold\">Satellite Monitoring</h3>\n                  <p className=\"text-gray-400 text-sm\">Real-time environmental verification</p>\n                </div>\n                <div className=\"ml-auto text-xs text-gray-400\">\n                  Updated: {new Date(satelliteData.last_updated).toLocaleString()}\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Location</div>\n                  <div className=\"text-white font-medium\">{satelliteData.location}</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Forest Coverage</div>\n                  <div className=\"text-white font-medium\">{satelliteData.forest_cover_percentage.toFixed(1)}%</div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Change Detected</div>\n                  <div className={`font-medium ${satelliteData.change_detected ? 'text-yellow-400' : 'text-green-400'}`}>\n                    {satelliteData.change_detected ? '‚ö†Ô∏è Changes detected' : '‚úÖ Stable'}\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-gray-400 text-sm\">Confidence Score</div>\n                  <div className=\"text-white font-medium\">{satelliteData.confidence_score.toFixed(1)}%</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Commitment Creation Form *\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8\">\n            <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-lg flex items-center justify-center mr-3\">\n                ‚ûï\n              </span>\n              Create New Environmental Commitment\n            </h2>\n            <form onSubmit={handleCreateCommitment} className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Commitment Title *</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.title}\n                  onChange={(e) => setNewCommitment({...newCommitment, title: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"e.g., Reduce PM2.5 levels by 30%\"\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Environmental Category *</label>\n                <select \n                  value={newCommitment.category}\n                  onChange={(e) => setNewCommitment({...newCommitment, category: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white focus:border-cyan-400 focus:outline-none transition-colors\"\n                  disabled={isSubmitting}\n                >\n                  <option value=\"forest_protection\">üå≥ Forest Protection & Reforestation</option>\n                  <option value=\"air_quality\">üè≠ Air Quality Improvement</option>\n                  <option value=\"water_management\">üíß Water Resource Management</option>\n                  <option value=\"biodiversity\">ü¶ã Biodiversity Conservation</option>\n                  <option value=\"waste_reduction\">‚ôªÔ∏è Waste Reduction & Recycling</option>\n                </select>\n              </div>\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Detailed Description *</label>\n                <textarea\n                  value={newCommitment.description}\n                  onChange={(e) => setNewCommitment({...newCommitment, description: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"Describe your environmental commitment, methodology, and expected impact...\"\n                  rows={4}\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Target Achievement (%) *</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.target_value}\n                  onChange={(e) => setNewCommitment({...newCommitment, target_value: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"Target percentage (e.g., 85)\"\n                  min=\"1\"\n                  max=\"100\"\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Completion Deadline *</label>\n                <input\n                  type=\"date\"\n                  value={newCommitment.deadline}\n                  onChange={(e) => setNewCommitment({...newCommitment, deadline: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white focus:border-cyan-400 focus:outline-none transition-colors\"\n                  min={new Date().toISOString().split('T')[0]}\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Name *</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_name}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_name: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"Your full name\"\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Official Role/Position *</label>\n                <input\n                  type=\"text\"\n                  value={newCommitment.official_role}\n                  onChange={(e) => setNewCommitment({...newCommitment, official_role: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"e.g., Environmental Minister, Mayor, etc.\"\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div>\n                <label className=\"block text-gray-300 text-sm font-medium mb-2\">Stake Amount (ETH) *</label>\n                <input\n                  type=\"number\"\n                  value={newCommitment.stake_amount}\n                  onChange={(e) => setNewCommitment({...newCommitment, stake_amount: e.target.value})}\n                  className=\"w-full bg-black/50 border border-cyan-500/30 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-colors\"\n                  placeholder=\"Amount to stake (e.g., 1.5)\"\n                  min=\"0.01\"\n                  step=\"0.01\"\n                  required\n                  disabled={isSubmitting}\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 disabled:from-gray-500 disabled:to-gray-600 text-white font-semibold py-4 px-8 rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:transform-none disabled:cursor-not-allowed\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <span className=\"animate-spin inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\"></span>\n                      Creating Commitment...\n                    </>\n                  ) : (\n                    <>üöÄ Create Smart Environmental Commitment</>\n                  )}\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {/* Commitments Feed *\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-white flex items-center\">\n              <span className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-400 rounded-lg flex items-center justify-center mr-3\">\n                üìã\n              </span>\n              Environmental Commitments Feed\n              <span className=\"ml-2 text-sm bg-cyan-500/20 text-cyan-400 px-2 py-1 rounded\">\n                {commitments.length} Active\n              </span>\n            </h2>\n            \n            {commitments.map((commitment) => (\n              <div key={commitment.id} className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-blue-500/20 p-6 hover:border-blue-500/40 transition-all duration-300 hover:transform hover:scale-[1.02]\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center mr-4\">\n                      {getCategoryIcon(commitment.category)}\n                    </div>\n                    <div>\n                      <h3 className=\"text-white font-semibold\">{commitment.official_name}</h3>\n                      <p className=\"text-gray-400 text-sm\">{commitment.official_role}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2 items-center\">\n                    <div className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                      commitment.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                      commitment.status === 'completed' ? 'bg-blue-500/20 text-blue-400' :\n                      commitment.status === 'rewarded' ? 'bg-yellow-500/20 text-yellow-400' :\n                      'bg-red-500/20 text-red-400'\n                    }`}>\n                      {commitment.status.toUpperCase()}\n                    </div>\n                    {commitment.satellite_verified && (\n                      <div className=\"px-2 py-1 rounded-full text-xs bg-purple-500/20 text-purple-400\">\n                        üõ∞Ô∏è Verified\n                      </div>\n                    )}\n                    {commitment.reward_claimed && (\n                      <div className=\"px-3 py-1 rounded-full text-sm font-semibold bg-yellow-500/20 text-yellow-400\">\n                        üí∞ {commitment.reward_amount?.toFixed(4)} ETH\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <h4 className=\"text-white font-semibold text-lg mb-2\">{commitment.title}</h4>\n                <p className=\"text-gray-300 mb-4\">{commitment.description}</p>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Progress</div>\n                    <div className=\"text-white font-medium\">\n                      {commitment.current_progress}% / {commitment.target_value}%\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Deadline</div>\n                    <div className=\"text-white font-medium\">{formatDate(commitment.deadline)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-400 text-sm\">Stake</div>\n                    <div className=\"text-white font-medium\">{commitment.stake_amount} ETH</div>\n                  </div>\n                </div>\n                \n                <div className=\"w-full bg-gray-800 rounded-full h-3 mb-4\">\n                  <div \n                    className=\"bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000\" \n                    style={{width: `${calculateProgress(commitment.current_progress, commitment.target_value)}%`}}\n                  ></div>\n                </div>\n                \n                <div className=\"flex justify-between items-center text-xs text-gray-400\">\n                  <div>\n                    Created: {formatDate(commitment.created_at)}\n                    {commitment.completion_date && ` ‚Ä¢ Completed: ${formatDate(commitment.completion_date)}`}\n                  </div>\n                  <div className=\"text-right\">\n                    Category: {commitment.category.replace('_', ' ')}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {commitments.length === 0 && (\n            <div className=\"bg-black/20 backdrop-blur-xl rounded-xl border border-gray-500/20 p-12 text-center\">\n              <div className=\"text-6xl mb-4\">üå±</div>\n              <h3 className=\"text-white text-xl mb-2\">No environmental commitments yet</h3>\n              <p className=\"text-gray-400 mb-6\">Be the first to create a verified environmental commitment and help build a sustainable future!</p>\n              <button \n                onClick={() => setCurrentView('feed')}\n                className=\"bg-cyan-500 hover:bg-cyan-600 text-white px-6 py-3 rounded-lg transition-colors\"\n              >\n                Create Your First Commitment\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n*/\n\n\n\n// app/page.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { getAirQualityData, getSatelliteData, getAllCommitments } from '@/lib/api-client';\n\ninterface DataState<T> {\n  loading: boolean;\n  error: string | null;\n  data: T | null;\n}\n\nexport default function Home() {\n  const [airQualityState, setAirQualityState] = useState<DataState<any>>({\n    loading: false,\n    error: null,\n    data: null,\n  });\n\n  const [satelliteState, setSatelliteState] = useState<DataState<any>>({\n    loading: false,\n    error: null,\n    data: null,\n  });\n\n  const [commitmentsState, setCommitmentsState] = useState<DataState<any>>({\n    loading: false,\n    error: null,\n    data: null,\n  });\n\n  const fetchAirQuality = async (location: string = 'London') => {\n    setAirQualityState({ loading: true, error: null, data: null });\n    \n    try {\n      const data = await getAirQualityData(location);\n      setAirQualityState({ loading: false, error: null, data });\n    } catch (error) {\n      setAirQualityState({ \n        loading: false, \n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n        data: null \n      });\n    }\n  };\n\n  const fetchSatelliteData = async () => {\n    setSatelliteState({ loading: true, error: null, data: null });\n    \n    try {\n      const data = await getSatelliteData();\n      setSatelliteState({ loading: false, error: null, data });\n    } catch (error) {\n      setSatelliteState({ \n        loading: false, \n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n        data: null \n      });\n    }\n  };\n\n  const fetchCommitments = async () => {\n    setCommitmentsState({ loading: true, error: null, data: null });\n    \n    try {\n      const data = await getAllCommitments();\n      setCommitmentsState({ loading: false, error: null, data });\n    } catch (error) {\n      setCommitmentsState({ \n        loading: false, \n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n        data: null \n      });\n    }\n  };\n\n  useEffect(() => {\n    // Fetch data on component mount\n    fetchAirQuality('London');\n    fetchSatelliteData();\n    fetchCommitments();\n  }, []);\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-3xl font-bold mb-8\">CivicXChain Dashboard</h1>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Air Quality Data */}\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4\">Air Quality Data</h2>\n          <button \n            onClick={() => fetchAirQuality('London')}\n            className=\"mb-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n          >\n            Refresh Air Quality\n          </button>\n          \n          {airQualityState.loading && <p className=\"text-gray-600\">Loading air quality data...</p>}\n          {airQualityState.error && <p className=\"text-red-500\">Error: {airQualityState.error}</p>}\n          {airQualityState.data && (\n            <pre className=\"bg-gray-100 p-2 rounded text-sm overflow-auto max-h-40\">\n              {JSON.stringify(airQualityState.data, null, 2)}\n            </pre>\n          )}\n        </div>\n\n        {/* Satellite Data */}\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4\">Satellite Data</h2>\n          <button \n            onClick={fetchSatelliteData}\n            className=\"mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\"\n          >\n            Refresh Satellite Data\n          </button>\n          \n          {satelliteState.loading && <p className=\"text-gray-600\">Loading satellite data...</p>}\n          {satelliteState.error && <p className=\"text-red-500\">Error: {satelliteState.error}</p>}\n          {satelliteState.data && (\n            <pre className=\"bg-gray-100 p-2 rounded text-sm overflow-auto max-h-40\">\n              {JSON.stringify(satelliteState.data, null, 2)}\n            </pre>\n          )}\n        </div>\n\n        {/* Commitments */}\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4\">Commitments</h2>\n          <button \n            onClick={fetchCommitments}\n            className=\"mb-4 bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600\"\n          >\n            Refresh Commitments\n          </button>\n          \n          {commitmentsState.loading && <p className=\"text-gray-600\">Loading commitments...</p>}\n          {commitmentsState.error && <p className=\"text-red-500\">Error: {commitmentsState.error}</p>}\n          {commitmentsState.data && (\n            <pre className=\"bg-gray-100 p-2 rounded text-sm overflow-auto max-h-40\">\n              {JSON.stringify(commitmentsState.data, null, 2)}\n            </pre>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkNE,GAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+cykmkmmtw8BA,GAIA,eAAe;;;;;AAGf;AACA;;;AAHA;;;AAWe,SAAS;;IACtB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB;QACrE,SAAS;QACT,OAAO;QACP,MAAM;IACR;IAEA,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB;QACnE,SAAS;QACT,OAAO;QACP,MAAM;IACR;IAEA,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB;QACvE,SAAS;QACT,OAAO;QACP,MAAM;IACR;IAEA,MAAM,kBAAkB,OAAO,WAAmB,QAAQ;QACxD,mBAAmB;YAAE,SAAS;YAAM,OAAO;YAAM,MAAM;QAAK;QAE5D,IAAI;YACF,MAAM,OAAO,MAAM,CAAA,GAAA,uHAAA,CAAA,oBAAiB,AAAD,EAAE;YACrC,mBAAmB;gBAAE,SAAS;gBAAO,OAAO;gBAAM;YAAK;QACzD,EAAE,OAAO,OAAO;YACd,mBAAmB;gBACjB,SAAS;gBACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;gBAChD,MAAM;YACR;QACF;IACF;IAEA,MAAM,qBAAqB;QACzB,kBAAkB;YAAE,SAAS;YAAM,OAAO;YAAM,MAAM;QAAK;QAE3D,IAAI;YACF,MAAM,OAAO,MAAM,CAAA,GAAA,uHAAA,CAAA,mBAAgB,AAAD;YAClC,kBAAkB;gBAAE,SAAS;gBAAO,OAAO;gBAAM;YAAK;QACxD,EAAE,OAAO,OAAO;YACd,kBAAkB;gBAChB,SAAS;gBACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;gBAChD,MAAM;YACR;QACF;IACF;IAEA,MAAM,mBAAmB;QACvB,oBAAoB;YAAE,SAAS;YAAM,OAAO;YAAM,MAAM;QAAK;QAE7D,IAAI;YACF,MAAM,OAAO,MAAM,CAAA,GAAA,uHAAA,CAAA,oBAAiB,AAAD;YACnC,oBAAoB;gBAAE,SAAS;gBAAO,OAAO;gBAAM;YAAK;QAC1D,EAAE,OAAO,OAAO;YACd,oBAAoB;gBAClB,SAAS;gBACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;gBAChD,MAAM;YACR;QACF;IACF;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0BAAE;YACR,gCAAgC;YAChC,gBAAgB;YAChB;YACA;QACF;yBAAG,EAAE;IAEL,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAA0B;;;;;;0BAExC,6LAAC;gBAAI,WAAU;;kCAEb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAA6B;;;;;;0CAC3C,6LAAC;gCACC,SAAS,IAAM,gBAAgB;gCAC/B,WAAU;0CACX;;;;;;4BAIA,gBAAgB,OAAO,kBAAI,6LAAC;gCAAE,WAAU;0CAAgB;;;;;;4BACxD,gBAAgB,KAAK,kBAAI,6LAAC;gCAAE,WAAU;;oCAAe;oCAAQ,gBAAgB,KAAK;;;;;;;4BAClF,gBAAgB,IAAI,kBACnB,6LAAC;gCAAI,WAAU;0CACZ,KAAK,SAAS,CAAC,gBAAgB,IAAI,EAAE,MAAM;;;;;;;;;;;;kCAMlD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAA6B;;;;;;0CAC3C,6LAAC;gCACC,SAAS;gCACT,WAAU;0CACX;;;;;;4BAIA,eAAe,OAAO,kBAAI,6LAAC;gCAAE,WAAU;0CAAgB;;;;;;4BACvD,eAAe,KAAK,kBAAI,6LAAC;gCAAE,WAAU;;oCAAe;oCAAQ,eAAe,KAAK;;;;;;;4BAChF,eAAe,IAAI,kBAClB,6LAAC;gCAAI,WAAU;0CACZ,KAAK,SAAS,CAAC,eAAe,IAAI,EAAE,MAAM;;;;;;;;;;;;kCAMjD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAA6B;;;;;;0CAC3C,6LAAC;gCACC,SAAS;gCACT,WAAU;0CACX;;;;;;4BAIA,iBAAiB,OAAO,kBAAI,6LAAC;gCAAE,WAAU;0CAAgB;;;;;;4BACzD,iBAAiB,KAAK,kBAAI,6LAAC;gCAAE,WAAU;;oCAAe;oCAAQ,iBAAiB,KAAK;;;;;;;4BACpF,iBAAiB,IAAI,kBACpB,6LAAC;gCAAI,WAAU;0CACZ,KAAK,SAAS,CAAC,iBAAiB,IAAI,EAAE,MAAM;;;;;;;;;;;;;;;;;;;;;;;;AAO3D;GAvIwB;KAAA","debugId":null}}]
}